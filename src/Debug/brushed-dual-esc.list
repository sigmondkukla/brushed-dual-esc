
brushed-dual-esc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003be4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003ca4  08003ca4  00004ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d38  08003d38  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003d38  08003d38  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003d38  08003d38  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d3c  08003d3c  00004d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003d40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003d4c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003d4c  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afc9  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b28  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  00011b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092d  00000000  00000000  00012700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000135f2  00000000  00000000  0001302d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf1e  00000000  00000000  0002661f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ef4f  00000000  00000000  0003353d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b248c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b0c  00000000  00000000  000b24d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b4fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003c8c 	.word	0x08003c8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003c8c 	.word	0x08003c8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fcb1 	bl	8000b8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f85e 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 faa8 	bl	8000780 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000230:	f000 f8a6 	bl	8000380 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000234:	f000 f932 	bl	800049c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000238:	f000 fa1c 	bl	8000674 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Turn on LED to indicate power
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800023c:	2380      	movs	r3, #128	@ 0x80
 800023e:	021b      	lsls	r3, r3, #8
 8000240:	4826      	ldr	r0, [pc, #152]	@ (80002dc <main+0xbc>)
 8000242:	2201      	movs	r2, #1
 8000244:	0019      	movs	r1, r3
 8000246:	f001 fc03 	bl	8001a50 <HAL_GPIO_WritePin>

	// --- Start Motor 1 (DRV1) PWM Channels ---
	// DRV1_IN1 (PA1) -> TIM1_CH2
	// DRV1_IN2 (PA2) -> TIM1_CH3
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800024a:	4b25      	ldr	r3, [pc, #148]	@ (80002e0 <main+0xc0>)
 800024c:	2104      	movs	r1, #4
 800024e:	0018      	movs	r0, r3
 8000250:	f002 f8e6 	bl	8002420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000254:	4b22      	ldr	r3, [pc, #136]	@ (80002e0 <main+0xc0>)
 8000256:	2108      	movs	r1, #8
 8000258:	0018      	movs	r0, r3
 800025a:	f002 f8e1 	bl	8002420 <HAL_TIM_PWM_Start>

	// --- Start Motor 2 (DRV2) PWM Channels ---
	// DRV2_IN1 (PA11) -> TIM1_CH4
	// DRV2_IN2 (PA8)  -> TIM1_CH1
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800025e:	4b20      	ldr	r3, [pc, #128]	@ (80002e0 <main+0xc0>)
 8000260:	210c      	movs	r1, #12
 8000262:	0018      	movs	r0, r3
 8000264:	f002 f8dc 	bl	8002420 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000268:	4b1d      	ldr	r3, [pc, #116]	@ (80002e0 <main+0xc0>)
 800026a:	2100      	movs	r1, #0
 800026c:	0018      	movs	r0, r3
 800026e:	f002 f8d7 	bl	8002420 <HAL_TIM_PWM_Start>

	// Set all motor outputs to 0 (Coast) initially
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000272:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <main+0xc0>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2200      	movs	r2, #0
 8000278:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 800027a:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <main+0xc0>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2200      	movs	r2, #0
 8000280:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000282:	4b17      	ldr	r3, [pc, #92]	@ (80002e0 <main+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2200      	movs	r2, #0
 8000288:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 800028a:	4b15      	ldr	r3, [pc, #84]	@ (80002e0 <main+0xc0>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	641a      	str	r2, [r3, #64]	@ 0x40

	// --- Start Input Capture Interrupts ---
	// The callback will handle switching edge polarity
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // RX_CH2 (PB6) -> Motor 2
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <main+0xc4>)
 8000294:	2100      	movs	r1, #0
 8000296:	0018      	movs	r0, r3
 8000298:	f002 f9fa 	bl	8002690 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // RX_CH1 (PB7) -> Motor 1
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <main+0xc4>)
 800029e:	2104      	movs	r1, #4
 80002a0:	0018      	movs	r0, r3
 80002a2:	f002 f9f5 	bl	8002690 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80002a6:	2380      	movs	r3, #128	@ 0x80
 80002a8:	021b      	lsls	r3, r3, #8
 80002aa:	480c      	ldr	r0, [pc, #48]	@ (80002dc <main+0xbc>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	0019      	movs	r1, r3
 80002b0:	f001 fbce 	bl	8001a50 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 80002b4:	23fa      	movs	r3, #250	@ 0xfa
 80002b6:	005b      	lsls	r3, r3, #1
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fce3 	bl	8000c84 <HAL_Delay>
  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 80002be:	2380      	movs	r3, #128	@ 0x80
 80002c0:	021b      	lsls	r3, r3, #8
 80002c2:	4806      	ldr	r0, [pc, #24]	@ (80002dc <main+0xbc>)
 80002c4:	2201      	movs	r2, #1
 80002c6:	0019      	movs	r1, r3
 80002c8:	f001 fbc2 	bl	8001a50 <HAL_GPIO_WritePin>
  	HAL_Delay(500);
 80002cc:	23fa      	movs	r3, #250	@ 0xfa
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fcd7 	bl	8000c84 <HAL_Delay>
  	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 80002d6:	46c0      	nop			@ (mov r8, r8)
 80002d8:	e7e5      	b.n	80002a6 <main+0x86>
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	50000800 	.word	0x50000800
 80002e0:	2000008c 	.word	0x2000008c
 80002e4:	200000d8 	.word	0x200000d8

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b08d      	sub	sp, #52	@ 0x34
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2414      	movs	r4, #20
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	231c      	movs	r3, #28
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f003 fc9b 	bl	8003c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	003b      	movs	r3, r7
 8000300:	0018      	movs	r0, r3
 8000302:	2314      	movs	r3, #20
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f003 fc94 	bl	8003c34 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 800030c:	4b1b      	ldr	r3, [pc, #108]	@ (800037c <SystemClock_Config+0x94>)
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	4b1a      	ldr	r3, [pc, #104]	@ (800037c <SystemClock_Config+0x94>)
 8000312:	2107      	movs	r1, #7
 8000314:	438a      	bics	r2, r1
 8000316:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000318:	193b      	adds	r3, r7, r4
 800031a:	2202      	movs	r2, #2
 800031c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2280      	movs	r2, #128	@ 0x80
 8000322:	0052      	lsls	r2, r2, #1
 8000324:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2280      	movs	r2, #128	@ 0x80
 800032a:	0152      	lsls	r2, r2, #5
 800032c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800032e:	193b      	adds	r3, r7, r4
 8000330:	2240      	movs	r2, #64	@ 0x40
 8000332:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000334:	193b      	adds	r3, r7, r4
 8000336:	0018      	movs	r0, r3
 8000338:	f001 fba8 	bl	8001a8c <HAL_RCC_OscConfig>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000340:	f000 fa70 	bl	8000824 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	003b      	movs	r3, r7
 8000346:	2207      	movs	r2, #7
 8000348:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034a:	003b      	movs	r3, r7
 800034c:	2200      	movs	r2, #0
 800034e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000350:	003b      	movs	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000356:	003b      	movs	r3, r7
 8000358:	2200      	movs	r2, #0
 800035a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800035c:	003b      	movs	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000362:	003b      	movs	r3, r7
 8000364:	2100      	movs	r1, #0
 8000366:	0018      	movs	r0, r3
 8000368:	f001 fd74 	bl	8001e54 <HAL_RCC_ClockConfig>
 800036c:	1e03      	subs	r3, r0, #0
 800036e:	d001      	beq.n	8000374 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000370:	f000 fa58 	bl	8000824 <Error_Handler>
  }
}
 8000374:	46c0      	nop			@ (mov r8, r8)
 8000376:	46bd      	mov	sp, r7
 8000378:	b00d      	add	sp, #52	@ 0x34
 800037a:	bd90      	pop	{r4, r7, pc}
 800037c:	40022000 	.word	0x40022000

08000380 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	0018      	movs	r0, r3
 800038a:	230c      	movs	r3, #12
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f003 fc50 	bl	8003c34 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000394:	4b3c      	ldr	r3, [pc, #240]	@ (8000488 <MX_ADC1_Init+0x108>)
 8000396:	4a3d      	ldr	r2, [pc, #244]	@ (800048c <MX_ADC1_Init+0x10c>)
 8000398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800039a:	4b3b      	ldr	r3, [pc, #236]	@ (8000488 <MX_ADC1_Init+0x108>)
 800039c:	22c0      	movs	r2, #192	@ 0xc0
 800039e:	0612      	lsls	r2, r2, #24
 80003a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003a2:	4b39      	ldr	r3, [pc, #228]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a8:	4b37      	ldr	r3, [pc, #220]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_SEQ_FIXED;
 80003ae:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003b0:	2280      	movs	r2, #128	@ 0x80
 80003b2:	0612      	lsls	r2, r2, #24
 80003b4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b6:	4b34      	ldr	r3, [pc, #208]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003bc:	4b32      	ldr	r3, [pc, #200]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80003c2:	4b31      	ldr	r3, [pc, #196]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003da:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003dc:	2200      	movs	r2, #0
 80003de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003e0:	4b29      	ldr	r3, [pc, #164]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003e2:	222c      	movs	r2, #44	@ 0x2c
 80003e4:	2100      	movs	r1, #0
 80003e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003e8:	4b27      	ldr	r3, [pc, #156]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003ee:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80003f4:	4b24      	ldr	r3, [pc, #144]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003f6:	223c      	movs	r2, #60	@ 0x3c
 80003f8:	2100      	movs	r1, #0
 80003fa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003fc:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_ADC1_Init+0x108>)
 80003fe:	2200      	movs	r2, #0
 8000400:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000402:	4b21      	ldr	r3, [pc, #132]	@ (8000488 <MX_ADC1_Init+0x108>)
 8000404:	0018      	movs	r0, r3
 8000406:	f000 fd5f 	bl	8000ec8 <HAL_ADC_Init>
 800040a:	1e03      	subs	r3, r0, #0
 800040c:	d001      	beq.n	8000412 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800040e:	f000 fa09 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2201      	movs	r2, #1
 8000416:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2201      	movs	r2, #1
 800041c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800041e:	1d3a      	adds	r2, r7, #4
 8000420:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <MX_ADC1_Init+0x108>)
 8000422:	0011      	movs	r1, r2
 8000424:	0018      	movs	r0, r3
 8000426:	f000 fef5 	bl	8001214 <HAL_ADC_ConfigChannel>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d001      	beq.n	8000432 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800042e:	f000 f9f9 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4a16      	ldr	r2, [pc, #88]	@ (8000490 <MX_ADC1_Init+0x110>)
 8000436:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000438:	1d3a      	adds	r2, r7, #4
 800043a:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_ADC1_Init+0x108>)
 800043c:	0011      	movs	r1, r2
 800043e:	0018      	movs	r0, r3
 8000440:	f000 fee8 	bl	8001214 <HAL_ADC_ConfigChannel>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000448:	f000 f9ec 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <MX_ADC1_Init+0x114>)
 8000450:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000452:	1d3a      	adds	r2, r7, #4
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <MX_ADC1_Init+0x108>)
 8000456:	0011      	movs	r1, r2
 8000458:	0018      	movs	r0, r3
 800045a:	f000 fedb 	bl	8001214 <HAL_ADC_ConfigChannel>
 800045e:	1e03      	subs	r3, r0, #0
 8000460:	d001      	beq.n	8000466 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000462:	f000 f9df 	bl	8000824 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000466:	1d3b      	adds	r3, r7, #4
 8000468:	4a0b      	ldr	r2, [pc, #44]	@ (8000498 <MX_ADC1_Init+0x118>)
 800046a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046c:	1d3a      	adds	r2, r7, #4
 800046e:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_ADC1_Init+0x108>)
 8000470:	0011      	movs	r1, r2
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fece 	bl	8001214 <HAL_ADC_ConfigChannel>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800047c:	f000 f9d2 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000480:	46c0      	nop			@ (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b004      	add	sp, #16
 8000486:	bd80      	pop	{r7, pc}
 8000488:	20000028 	.word	0x20000028
 800048c:	40012400 	.word	0x40012400
 8000490:	1c000080 	.word	0x1c000080
 8000494:	a4000200 	.word	0xa4000200
 8000498:	30001000 	.word	0x30001000

0800049c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b09c      	sub	sp, #112	@ 0x70
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004a2:	2360      	movs	r3, #96	@ 0x60
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	0018      	movs	r0, r3
 80004a8:	2310      	movs	r3, #16
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f003 fbc1 	bl	8003c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b2:	2354      	movs	r3, #84	@ 0x54
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	0018      	movs	r0, r3
 80004b8:	230c      	movs	r3, #12
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 fbb9 	bl	8003c34 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c2:	2338      	movs	r3, #56	@ 0x38
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	231c      	movs	r3, #28
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 fbb1 	bl	8003c34 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	2334      	movs	r3, #52	@ 0x34
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 fbaa 	bl	8003c34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004e0:	4b61      	ldr	r3, [pc, #388]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80004e2:	4a62      	ldr	r2, [pc, #392]	@ (800066c <MX_TIM1_Init+0x1d0>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004e6:	4b60      	ldr	r3, [pc, #384]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b5e      	ldr	r3, [pc, #376]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 599;
 80004f2:	4b5d      	ldr	r3, [pc, #372]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80004f4:	4a5e      	ldr	r2, [pc, #376]	@ (8000670 <MX_TIM1_Init+0x1d4>)
 80004f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b5b      	ldr	r3, [pc, #364]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004fe:	4b5a      	ldr	r3, [pc, #360]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000504:	4b58      	ldr	r3, [pc, #352]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 8000506:	2280      	movs	r2, #128	@ 0x80
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800050a:	4b57      	ldr	r3, [pc, #348]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fecf 	bl	80022b0 <HAL_TIM_Base_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000516:	f000 f985 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800051a:	2160      	movs	r1, #96	@ 0x60
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2280      	movs	r2, #128	@ 0x80
 8000520:	0152      	lsls	r2, r2, #5
 8000522:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000524:	187a      	adds	r2, r7, r1
 8000526:	4b50      	ldr	r3, [pc, #320]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 8000528:	0011      	movs	r1, r2
 800052a:	0018      	movs	r0, r3
 800052c:	f002 fc86 	bl	8002e3c <HAL_TIM_ConfigClockSource>
 8000530:	1e03      	subs	r3, r0, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000534:	f000 f976 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000538:	4b4b      	ldr	r3, [pc, #300]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 800053a:	0018      	movs	r0, r3
 800053c:	f001 ff10 	bl	8002360 <HAL_TIM_PWM_Init>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000544:	f000 f96e 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000548:	2154      	movs	r1, #84	@ 0x54
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000550:	187b      	adds	r3, r7, r1
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800055c:	187a      	adds	r2, r7, r1
 800055e:	4b42      	ldr	r3, [pc, #264]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f003 fa50 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	1e03      	subs	r3, r0, #0
 800056a:	d001      	beq.n	8000570 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800056c:	f000 f95a 	bl	8000824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000570:	2138      	movs	r1, #56	@ 0x38
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2260      	movs	r2, #96	@ 0x60
 8000576:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800059c:	1879      	adds	r1, r7, r1
 800059e:	4b32      	ldr	r3, [pc, #200]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	0018      	movs	r0, r3
 80005a4:	f002 fb4a 	bl	8002c3c <HAL_TIM_PWM_ConfigChannel>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80005ac:	f000 f93a 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80005b0:	2338      	movs	r3, #56	@ 0x38
 80005b2:	18f9      	adds	r1, r7, r3
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80005b6:	2204      	movs	r2, #4
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fb3f 	bl	8002c3c <HAL_TIM_PWM_ConfigChannel>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80005c2:	f000 f92f 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c6:	2338      	movs	r3, #56	@ 0x38
 80005c8:	18f9      	adds	r1, r7, r3
 80005ca:	4b27      	ldr	r3, [pc, #156]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80005cc:	2208      	movs	r2, #8
 80005ce:	0018      	movs	r0, r3
 80005d0:	f002 fb34 	bl	8002c3c <HAL_TIM_PWM_ConfigChannel>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80005d8:	f000 f924 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005dc:	2338      	movs	r3, #56	@ 0x38
 80005de:	18f9      	adds	r1, r7, r3
 80005e0:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 80005e2:	220c      	movs	r2, #12
 80005e4:	0018      	movs	r0, r3
 80005e6:	f002 fb29 	bl	8002c3c <HAL_TIM_PWM_ConfigChannel>
 80005ea:	1e03      	subs	r3, r0, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM1_Init+0x156>
  {
    Error_Handler();
 80005ee:	f000 f919 	bl	8000824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2200      	movs	r2, #0
 8000628:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	0492      	lsls	r2, r2, #18
 8000630:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	2200      	movs	r2, #0
 8000642:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000644:	1d3a      	adds	r2, r7, #4
 8000646:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f003 fa3e 	bl	8003acc <HAL_TIMEx_ConfigBreakDeadTime>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM1_Init+0x1bc>
  {
    Error_Handler();
 8000654:	f000 f8e6 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <MX_TIM1_Init+0x1cc>)
 800065a:	0018      	movs	r0, r3
 800065c:	f000 f9e6 	bl	8000a2c <HAL_TIM_MspPostInit>

}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b01c      	add	sp, #112	@ 0x70
 8000666:	bd80      	pop	{r7, pc}
 8000668:	2000008c 	.word	0x2000008c
 800066c:	40012c00 	.word	0x40012c00
 8000670:	00000257 	.word	0x00000257

08000674 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08c      	sub	sp, #48	@ 0x30
 8000678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067a:	2320      	movs	r3, #32
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2310      	movs	r3, #16
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 fad5 	bl	8003c34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068a:	2314      	movs	r3, #20
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	230c      	movs	r3, #12
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f003 facd 	bl	8003c34 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	0018      	movs	r0, r3
 800069e:	2310      	movs	r3, #16
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f003 fac6 	bl	8003c34 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006a8:	4b32      	ldr	r3, [pc, #200]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006aa:	4a33      	ldr	r2, [pc, #204]	@ (8000778 <MX_TIM3_Init+0x104>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 11;
 80006ae:	4b31      	ldr	r3, [pc, #196]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006b0:	220b      	movs	r2, #11
 80006b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006bc:	4a2f      	ldr	r2, [pc, #188]	@ (800077c <MX_TIM3_Init+0x108>)
 80006be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fdee 	bl	80022b0 <HAL_TIM_Base_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80006d8:	f000 f8a4 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006dc:	2120      	movs	r1, #32
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2280      	movs	r2, #128	@ 0x80
 80006e2:	0152      	lsls	r2, r2, #5
 80006e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006e6:	187a      	adds	r2, r7, r1
 80006e8:	4b22      	ldr	r3, [pc, #136]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006ea:	0011      	movs	r1, r2
 80006ec:	0018      	movs	r0, r3
 80006ee:	f002 fba5 	bl	8002e3c <HAL_TIM_ConfigClockSource>
 80006f2:	1e03      	subs	r3, r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80006f6:	f000 f895 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80006fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_TIM3_Init+0x100>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 ff67 	bl	80025d0 <HAL_TIM_IC_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000706:	f000 f88d 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070a:	2114      	movs	r1, #20
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000718:	187a      	adds	r2, r7, r1
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_TIM3_Init+0x100>)
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f003 f972 	bl	8003a08 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000728:	f000 f87c 	bl	8000824 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2201      	movs	r2, #1
 8000736:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000744:	1d39      	adds	r1, r7, #4
 8000746:	4b0b      	ldr	r3, [pc, #44]	@ (8000774 <MX_TIM3_Init+0x100>)
 8000748:	2200      	movs	r2, #0
 800074a:	0018      	movs	r0, r3
 800074c:	f002 f9d2 	bl	8002af4 <HAL_TIM_IC_ConfigChannel>
 8000750:	1e03      	subs	r3, r0, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000754:	f000 f866 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000758:	1d39      	adds	r1, r7, #4
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_TIM3_Init+0x100>)
 800075c:	2204      	movs	r2, #4
 800075e:	0018      	movs	r0, r3
 8000760:	f002 f9c8 	bl	8002af4 <HAL_TIM_IC_ConfigChannel>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8000768:	f000 f85c 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	b00c      	add	sp, #48	@ 0x30
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000d8 	.word	0x200000d8
 8000778:	40000400 	.word	0x40000400
 800077c:	0000ffff 	.word	0x0000ffff

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b089      	sub	sp, #36	@ 0x24
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	240c      	movs	r4, #12
 8000788:	193b      	adds	r3, r7, r4
 800078a:	0018      	movs	r0, r3
 800078c:	2314      	movs	r3, #20
 800078e:	001a      	movs	r2, r3
 8000790:	2100      	movs	r1, #0
 8000792:	f003 fa4f 	bl	8003c34 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_GPIO_Init+0x9c>)
 8000798:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_GPIO_Init+0x9c>)
 800079c:	2104      	movs	r1, #4
 800079e:	430a      	orrs	r2, r1
 80007a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007a6:	2204      	movs	r2, #4
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007b4:	2101      	movs	r1, #1
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007be:	2201      	movs	r2, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007d2:	4b12      	ldr	r3, [pc, #72]	@ (800081c <MX_GPIO_Init+0x9c>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d6:	2202      	movs	r2, #2
 80007d8:	4013      	ands	r3, r2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007de:	2380      	movs	r3, #128	@ 0x80
 80007e0:	021b      	lsls	r3, r3, #8
 80007e2:	480f      	ldr	r0, [pc, #60]	@ (8000820 <MX_GPIO_Init+0xa0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	0019      	movs	r1, r3
 80007e8:	f001 f932 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2280      	movs	r2, #128	@ 0x80
 80007f0:	0212      	lsls	r2, r2, #8
 80007f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000806:	193b      	adds	r3, r7, r4
 8000808:	4a05      	ldr	r2, [pc, #20]	@ (8000820 <MX_GPIO_Init+0xa0>)
 800080a:	0019      	movs	r1, r3
 800080c:	0010      	movs	r0, r2
 800080e:	f000 ffb5 	bl	800177c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b009      	add	sp, #36	@ 0x24
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000
 8000820:	50000800 	.word	0x50000800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	e7fd      	b.n	800082c <Error_Handler+0x8>

08000830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <HAL_MspInit+0x44>)
 8000838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <HAL_MspInit+0x44>)
 800083c:	2101      	movs	r1, #1
 800083e:	430a      	orrs	r2, r1
 8000840:	641a      	str	r2, [r3, #64]	@ 0x40
 8000842:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <HAL_MspInit+0x44>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	2201      	movs	r2, #1
 8000848:	4013      	ands	r3, r2
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_MspInit+0x44>)
 8000850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <HAL_MspInit+0x44>)
 8000854:	2180      	movs	r1, #128	@ 0x80
 8000856:	0549      	lsls	r1, r1, #21
 8000858:	430a      	orrs	r2, r1
 800085a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <HAL_MspInit+0x44>)
 800085e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	055b      	lsls	r3, r3, #21
 8000864:	4013      	ands	r3, r2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b091      	sub	sp, #68	@ 0x44
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	232c      	movs	r3, #44	@ 0x2c
 8000882:	18fb      	adds	r3, r7, r3
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f003 f9d2 	bl	8003c34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	2410      	movs	r4, #16
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0018      	movs	r0, r3
 8000896:	231c      	movs	r3, #28
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f003 f9ca 	bl	8003c34 <memset>
  if(hadc->Instance==ADC1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a1f      	ldr	r2, [pc, #124]	@ (8000924 <HAL_ADC_MspInit+0xac>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d138      	bne.n	800091c <HAL_ADC_MspInit+0xa4>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2220      	movs	r2, #32
 80008ae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	0018      	movs	r0, r3
 80008ba:	f001 fc0d 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	1e03      	subs	r3, r0, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_ADC_MspInit+0x4e>
    {
      Error_Handler();
 80008c2:	f7ff ffaf 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <HAL_ADC_MspInit+0xb0>)
 80008c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ca:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <HAL_ADC_MspInit+0xb0>)
 80008cc:	2180      	movs	r1, #128	@ 0x80
 80008ce:	0349      	lsls	r1, r1, #13
 80008d0:	430a      	orrs	r2, r1
 80008d2:	641a      	str	r2, [r3, #64]	@ 0x40
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <HAL_ADC_MspInit+0xb0>)
 80008d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d8:	2380      	movs	r3, #128	@ 0x80
 80008da:	035b      	lsls	r3, r3, #13
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e2:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <HAL_ADC_MspInit+0xb0>)
 80008e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_ADC_MspInit+0xb0>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_ADC_MspInit+0xb0>)
 80008f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f2:	2201      	movs	r2, #1
 80008f4:	4013      	ands	r3, r2
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = DRV1_ISENSE_Pin|DRV2_ISENSE_Pin|BATT_SENSE_Pin;
 80008fa:	212c      	movs	r1, #44	@ 0x2c
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_ADC_MspInit+0xb4>)
 8000900:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2203      	movs	r2, #3
 8000906:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	187a      	adds	r2, r7, r1
 8000910:	23a0      	movs	r3, #160	@ 0xa0
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f000 ff30 	bl	800177c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b011      	add	sp, #68	@ 0x44
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	40012400 	.word	0x40012400
 8000928:	40021000 	.word	0x40021000
 800092c:	00001081 	.word	0x00001081

08000930 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b08b      	sub	sp, #44	@ 0x2c
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	2314      	movs	r3, #20
 800093a:	18fb      	adds	r3, r7, r3
 800093c:	0018      	movs	r0, r3
 800093e:	2314      	movs	r3, #20
 8000940:	001a      	movs	r2, r3
 8000942:	2100      	movs	r1, #0
 8000944:	f003 f976 	bl	8003c34 <memset>
  if(htim_base->Instance==TIM1)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <HAL_TIM_Base_MspInit+0xec>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d10e      	bne.n	8000970 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000952:	4b33      	ldr	r3, [pc, #204]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000956:	4b32      	ldr	r3, [pc, #200]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000958:	2180      	movs	r1, #128	@ 0x80
 800095a:	0109      	lsls	r1, r1, #4
 800095c:	430a      	orrs	r2, r1
 800095e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000960:	4b2f      	ldr	r3, [pc, #188]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000964:	2380      	movs	r3, #128	@ 0x80
 8000966:	011b      	lsls	r3, r3, #4
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800096e:	e050      	b.n	8000a12 <HAL_TIM_Base_MspInit+0xe2>
  else if(htim_base->Instance==TIM3)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a2b      	ldr	r2, [pc, #172]	@ (8000a24 <HAL_TIM_Base_MspInit+0xf4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d14b      	bne.n	8000a12 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 800097c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800097e:	4b28      	ldr	r3, [pc, #160]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000980:	2102      	movs	r1, #2
 8000982:	430a      	orrs	r2, r1
 8000984:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800098a:	2202      	movs	r2, #2
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000994:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000996:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 8000998:	2102      	movs	r1, #2
 800099a:	430a      	orrs	r2, r1
 800099c:	635a      	str	r2, [r3, #52]	@ 0x34
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <HAL_TIM_Base_MspInit+0xf0>)
 80009a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009a2:	2202      	movs	r2, #2
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RX_CH2_Pin;
 80009aa:	2414      	movs	r4, #20
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2240      	movs	r2, #64	@ 0x40
 80009b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2202      	movs	r2, #2
 80009b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM3;
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	220d      	movs	r2, #13
 80009c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RX_CH2_GPIO_Port, &GPIO_InitStruct);
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <HAL_TIM_Base_MspInit+0xf8>)
 80009ce:	0019      	movs	r1, r3
 80009d0:	0010      	movs	r0, r2
 80009d2:	f000 fed3 	bl	800177c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX_CH1_Pin;
 80009d6:	0021      	movs	r1, r4
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2280      	movs	r2, #128	@ 0x80
 80009dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM3;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	220b      	movs	r2, #11
 80009f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RX_CH1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a28 <HAL_TIM_Base_MspInit+0xf8>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	0010      	movs	r0, r2
 80009fe:	f000 febd 	bl	800177c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2010      	movs	r0, #16
 8000a08:	f000 fe86 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a0c:	2010      	movs	r0, #16
 8000a0e:	f000 fe98 	bl	8001742 <HAL_NVIC_EnableIRQ>
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b00b      	add	sp, #44	@ 0x2c
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	40012c00 	.word	0x40012c00
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40000400 	.word	0x40000400
 8000a28:	50000400 	.word	0x50000400

08000a2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b089      	sub	sp, #36	@ 0x24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	240c      	movs	r4, #12
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2314      	movs	r3, #20
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f003 f8f8 	bl	8003c34 <memset>
  if(htim->Instance==TIM1)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a20      	ldr	r2, [pc, #128]	@ (8000acc <HAL_TIM_MspPostInit+0xa0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d139      	bne.n	8000ac2 <HAL_TIM_MspPostInit+0x96>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <HAL_TIM_MspPostInit+0xa4>)
 8000a50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <HAL_TIM_MspPostInit+0xa4>)
 8000a54:	2101      	movs	r1, #1
 8000a56:	430a      	orrs	r2, r1
 8000a58:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad0 <HAL_TIM_MspPostInit+0xa4>)
 8000a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM1_CH2
    PA2     ------> TIM1_CH3
    PA8     ------> TIM1_CH1
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = DRV1_IN1_Pin|DRV1_IN2_Pin;
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	2206      	movs	r2, #6
 8000a6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	2202      	movs	r2, #2
 8000a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM1;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2205      	movs	r2, #5
 8000a82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	193a      	adds	r2, r7, r4
 8000a86:	23a0      	movs	r3, #160	@ 0xa0
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fe75 	bl	800177c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRV2_IN2_Pin|DRV2_IN1_Pin;
 8000a92:	0021      	movs	r1, r4
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2290      	movs	r2, #144	@ 0x90
 8000a98:	0112      	lsls	r2, r2, #4
 8000a9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	187a      	adds	r2, r7, r1
 8000ab6:	23a0      	movs	r3, #160	@ 0xa0
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fe5d 	bl	800177c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b009      	add	sp, #36	@ 0x24
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	40012c00 	.word	0x40012c00
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	e7fd      	b.n	8000ad8 <NMI_Handler+0x4>

08000adc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	e7fd      	b.n	8000ae0 <HardFault_Handler+0x4>

08000ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae8:	46c0      	nop			@ (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000afc:	f000 f8a6 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b00:	46c0      	nop			@ (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <TIM3_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f001 fee8 	bl	80028e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	200000d8 	.word	0x200000d8

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <SystemInit+0x14>)
 8000b26:	2280      	movs	r2, #128	@ 0x80
 8000b28:	0512      	lsls	r2, r2, #20
 8000b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b38:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b3a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b3c:	f7ff fff0 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b40:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b42:	e003      	b.n	8000b4c <LoopCopyDataInit>

08000b44 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b46:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b48:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b4a:	3104      	adds	r1, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b4c:	480a      	ldr	r0, [pc, #40]	@ (8000b78 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <LoopForever+0xe>)
  adds r2, r0, r1
 8000b50:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b52:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b54:	d3f6      	bcc.n	8000b44 <CopyDataInit>
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b58:	e002      	b.n	8000b60 <LoopFillZerobss>

08000b5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b5c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5e:	3204      	adds	r2, #4

08000b60 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <LoopForever+0x16>)
  cmp r2, r3
 8000b62:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b64:	d3f9      	bcc.n	8000b5a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b66:	f003 f86d 	bl	8003c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b6a:	f7ff fb59 	bl	8000220 <main>

08000b6e <LoopForever>:

LoopForever:
    b LoopForever
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
  ldr   r0, =_estack
 8000b70:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b74:	08003d40 	.word	0x08003d40
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b80:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b84:	20000128 	.word	0x20000128

08000b88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC1_IRQHandler>

08000b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	2003      	movs	r0, #3
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d003      	beq.n	8000ba8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff fe42 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <HAL_InitTick+0x88>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d02b      	beq.n	8000c28 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <HAL_InitTick+0x8c>)
 8000bd2:	681c      	ldr	r4, [r3, #0]
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c40 <HAL_InitTick+0x88>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	0019      	movs	r1, r3
 8000bda:	23fa      	movs	r3, #250	@ 0xfa
 8000bdc:	0098      	lsls	r0, r3, #2
 8000bde:	f7ff fa93 	bl	8000108 <__udivsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f7ff fa8e 	bl	8000108 <__udivsi3>
 8000bec:	0003      	movs	r3, r0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f000 fdb7 	bl	8001762 <HAL_SYSTICK_Config>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d112      	bne.n	8000c1e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80a      	bhi.n	8000c14 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 fd86 	bl	8001718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <HAL_InitTick+0x90>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	e00d      	b.n	8000c30 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2201      	movs	r2, #1
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e008      	b.n	8000c30 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	2201      	movs	r2, #1
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	e003      	b.n	8000c30 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c30:	230f      	movs	r3, #15
 8000c32:	18fb      	adds	r3, r7, r3
 8000c34:	781b      	ldrb	r3, [r3, #0]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			@ (mov r8, r8)
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <HAL_IncTick+0x1c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	18d2      	adds	r2, r2, r3
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000124 	.word	0x20000124

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b02      	ldr	r3, [pc, #8]	@ (8000c80 <HAL_GetTick+0x10>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000124 	.word	0x20000124

08000c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c8c:	f7ff fff0 	bl	8000c70 <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	d005      	beq.n	8000caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc8 <HAL_Delay+0x44>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	001a      	movs	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	189b      	adds	r3, r3, r2
 8000ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	f7ff ffe0 	bl	8000c70 <HAL_GetTick>
 8000cb0:	0002      	movs	r2, r0
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	68fa      	ldr	r2, [r7, #12]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d8f7      	bhi.n	8000cac <HAL_Delay+0x28>
  {
  }
}
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	46c0      	nop			@ (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			@ (mov r8, r8)
 8000cc8:	20000008 	.word	0x20000008

08000ccc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000cdc:	401a      	ands	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
}
 8000ce6:	46c0      	nop			@ (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			@ (mov r8, r8)
 8000cf0:	ff3fffff 	.word	0xff3fffff

08000cf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	23c0      	movs	r3, #192	@ 0xc0
 8000d02:	041b      	lsls	r3, r3, #16
 8000d04:	4013      	ands	r3, r2
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b084      	sub	sp, #16
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	2104      	movs	r1, #4
 8000d22:	400a      	ands	r2, r1
 8000d24:	2107      	movs	r1, #7
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	43d2      	mvns	r2, r2
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	2104      	movs	r1, #4
 8000d32:	400b      	ands	r3, r1
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4099      	lsls	r1, r3
 8000d38:	000b      	movs	r3, r1
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d40:	46c0      	nop			@ (mov r8, r8)
 8000d42:	46bd      	mov	sp, r7
 8000d44:	b004      	add	sp, #16
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	2104      	movs	r1, #4
 8000d5a:	400a      	ands	r2, r1
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	4091      	lsls	r1, r2
 8000d60:	000a      	movs	r2, r1
 8000d62:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	2104      	movs	r1, #4
 8000d68:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	0013      	movs	r3, r2
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b002      	add	sp, #8
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b084      	sub	sp, #16
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	60f8      	str	r0, [r7, #12]
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	211f      	movs	r1, #31
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	4091      	lsls	r1, r2
 8000d90:	000a      	movs	r2, r1
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	401a      	ands	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	0e9b      	lsrs	r3, r3, #26
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	4019      	ands	r1, r3
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	201f      	movs	r0, #31
 8000da2:	4003      	ands	r3, r0
 8000da4:	4099      	lsls	r1, r3
 8000da6:	000b      	movs	r3, r1
 8000da8:	431a      	orrs	r2, r3
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
 8000dbe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	025b      	lsls	r3, r3, #9
 8000dc8:	0a5b      	lsrs	r3, r3, #9
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	0252      	lsls	r2, r2, #9
 8000dea:	0a52      	lsrs	r2, r2, #9
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	0212      	lsls	r2, r2, #8
 8000e10:	43d2      	mvns	r2, r2
 8000e12:	401a      	ands	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	4904      	ldr	r1, [pc, #16]	@ (8000e30 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000e1e:	400b      	ands	r3, r1
 8000e20:	431a      	orrs	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			@ (mov r8, r8)
 8000e30:	7fffff00 	.word	0x7fffff00

08000e34 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	4a05      	ldr	r2, [pc, #20]	@ (8000e58 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	2280      	movs	r2, #128	@ 0x80
 8000e46:	0552      	lsls	r2, r2, #21
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	6fffffe8 	.word	0x6fffffe8

08000e5c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	055b      	lsls	r3, r3, #21
 8000e6c:	401a      	ands	r2, r3
 8000e6e:	2380      	movs	r3, #128	@ 0x80
 8000e70:	055b      	lsls	r3, r3, #21
 8000e72:	429a      	cmp	r2, r3
 8000e74:	d101      	bne.n	8000e7a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e76:	2301      	movs	r3, #1
 8000e78:	e000      	b.n	8000e7c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e7a:	2300      	movs	r3, #0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2201      	movs	r2, #1
 8000e92:	4013      	ands	r3, r2
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <LL_ADC_IsEnabled+0x18>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <LL_ADC_IsEnabled+0x1a>
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	b002      	add	sp, #8
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d101      	bne.n	8000ebe <LL_ADC_REG_IsConversionOngoing+0x18>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed0:	231f      	movs	r3, #31
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e17e      	b.n	80011ec <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10a      	bne.n	8000f0c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff fcbd 	bl	8000878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2254      	movs	r2, #84	@ 0x54
 8000f08:	2100      	movs	r1, #0
 8000f0a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff ffa3 	bl	8000e5c <LL_ADC_IsInternalRegulatorEnabled>
 8000f16:	1e03      	subs	r3, r0, #0
 8000f18:	d114      	bne.n	8000f44 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff ff88 	bl	8000e34 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000f24:	4bb3      	ldr	r3, [pc, #716]	@ (80011f4 <HAL_ADC_Init+0x32c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	49b3      	ldr	r1, [pc, #716]	@ (80011f8 <HAL_ADC_Init+0x330>)
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f7ff f8ec 	bl	8000108 <__udivsi3>
 8000f30:	0003      	movs	r3, r0
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f36:	e002      	b.n	8000f3e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f9      	bne.n	8000f38 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f7ff ff87 	bl	8000e5c <LL_ADC_IsInternalRegulatorEnabled>
 8000f4e:	1e03      	subs	r3, r0, #0
 8000f50:	d10f      	bne.n	8000f72 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f56:	2210      	movs	r2, #16
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f62:	2201      	movs	r2, #1
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f6a:	231f      	movs	r3, #31
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0018      	movs	r0, r3
 8000f78:	f7ff ff95 	bl	8000ea6 <LL_ADC_REG_IsConversionOngoing>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f84:	2210      	movs	r2, #16
 8000f86:	4013      	ands	r3, r2
 8000f88:	d000      	beq.n	8000f8c <HAL_ADC_Init+0xc4>
 8000f8a:	e122      	b.n	80011d2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d000      	beq.n	8000f94 <HAL_ADC_Init+0xcc>
 8000f92:	e11e      	b.n	80011d2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f98:	4a98      	ldr	r2, [pc, #608]	@ (80011fc <HAL_ADC_Init+0x334>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	431a      	orrs	r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff6b 	bl	8000e84 <LL_ADC_IsEnabled>
 8000fae:	1e03      	subs	r3, r0, #0
 8000fb0:	d000      	beq.n	8000fb4 <HAL_ADC_Init+0xec>
 8000fb2:	e0ad      	b.n	8001110 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
 8000fbc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000fbe:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7e5b      	ldrb	r3, [r3, #25]
 8000fc4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fc6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fce:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d002      	beq.n	8000fde <HAL_ADC_Init+0x116>
 8000fd8:	2380      	movs	r3, #128	@ 0x80
 8000fda:	015b      	lsls	r3, r3, #5
 8000fdc:	e000      	b.n	8000fe0 <HAL_ADC_Init+0x118>
 8000fde:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fe0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fe6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	da04      	bge.n	8000ffa <HAL_ADC_Init+0x132>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	085b      	lsrs	r3, r3, #1
 8000ff8:	e001      	b.n	8000ffe <HAL_ADC_Init+0x136>
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000ffe:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	212c      	movs	r1, #44	@ 0x2c
 8001004:	5c5b      	ldrb	r3, [r3, r1]
 8001006:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001008:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2220      	movs	r2, #32
 8001014:	5c9b      	ldrb	r3, [r3, r2]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d115      	bne.n	8001046 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7e9b      	ldrb	r3, [r3, #26]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	2280      	movs	r2, #128	@ 0x80
 8001026:	0252      	lsls	r2, r2, #9
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
 800102c:	e00b      	b.n	8001046 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001032:	2220      	movs	r2, #32
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800103e:	2201      	movs	r2, #1
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00a      	beq.n	8001064 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001052:	23e0      	movs	r3, #224	@ 0xe0
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800105c:	4313      	orrs	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4a65      	ldr	r2, [pc, #404]	@ (8001200 <HAL_ADC_Init+0x338>)
 800106c:	4013      	ands	r3, r2
 800106e:	0019      	movs	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	430a      	orrs	r2, r1
 8001078:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	0f9b      	lsrs	r3, r3, #30
 8001080:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001086:	4313      	orrs	r3, r2
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	4313      	orrs	r3, r2
 800108c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	223c      	movs	r2, #60	@ 0x3c
 8001092:	5c9b      	ldrb	r3, [r3, r2]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d111      	bne.n	80010bc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	0f9b      	lsrs	r3, r3, #30
 800109e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80010aa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80010b0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	2201      	movs	r2, #1
 80010b8:	4313      	orrs	r3, r2
 80010ba:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	4a50      	ldr	r2, [pc, #320]	@ (8001204 <HAL_ADC_Init+0x33c>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	0019      	movs	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	23c0      	movs	r3, #192	@ 0xc0
 80010d8:	061b      	lsls	r3, r3, #24
 80010da:	429a      	cmp	r2, r3
 80010dc:	d018      	beq.n	8001110 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	05db      	lsls	r3, r3, #23
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d012      	beq.n	8001110 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	061b      	lsls	r3, r3, #24
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d00c      	beq.n	8001110 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80010f6:	4b44      	ldr	r3, [pc, #272]	@ (8001208 <HAL_ADC_Init+0x340>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a44      	ldr	r2, [pc, #272]	@ (800120c <HAL_ADC_Init+0x344>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	0019      	movs	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	23f0      	movs	r3, #240	@ 0xf0
 8001106:	039b      	lsls	r3, r3, #14
 8001108:	401a      	ands	r2, r3
 800110a:	4b3f      	ldr	r3, [pc, #252]	@ (8001208 <HAL_ADC_Init+0x340>)
 800110c:	430a      	orrs	r2, r1
 800110e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001118:	001a      	movs	r2, r3
 800111a:	2100      	movs	r1, #0
 800111c:	f7ff fdf7 	bl	8000d0e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001128:	4939      	ldr	r1, [pc, #228]	@ (8001210 <HAL_ADC_Init+0x348>)
 800112a:	001a      	movs	r2, r3
 800112c:	f7ff fdef 	bl	8000d0e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d109      	bne.n	800114c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2110      	movs	r1, #16
 8001144:	4249      	negs	r1, r1
 8001146:	430a      	orrs	r2, r1
 8001148:	629a      	str	r2, [r3, #40]	@ 0x28
 800114a:	e018      	b.n	800117e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	2380      	movs	r3, #128	@ 0x80
 8001152:	039b      	lsls	r3, r3, #14
 8001154:	429a      	cmp	r2, r3
 8001156:	d112      	bne.n	800117e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	3b01      	subs	r3, #1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	221c      	movs	r2, #28
 8001168:	4013      	ands	r3, r2
 800116a:	2210      	movs	r2, #16
 800116c:	4252      	negs	r2, r2
 800116e:	409a      	lsls	r2, r3
 8001170:	0011      	movs	r1, r2
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28
    {
      /* Nothing to do */
    }
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2100      	movs	r1, #0
 8001184:	0018      	movs	r0, r3
 8001186:	f7ff fddf 	bl	8000d48 <LL_ADC_GetSamplingTimeCommonChannels>
 800118a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001190:	429a      	cmp	r2, r3
 8001192:	d10b      	bne.n	80011ac <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	2203      	movs	r2, #3
 80011a0:	4393      	bics	r3, r2
 80011a2:	2201      	movs	r2, #1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011aa:	e01c      	b.n	80011e6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b0:	2212      	movs	r2, #18
 80011b2:	4393      	bics	r3, r2
 80011b4:	2210      	movs	r2, #16
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c0:	2201      	movs	r2, #1
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80011c8:	231f      	movs	r3, #31
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011d0:	e009      	b.n	80011e6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	2210      	movs	r2, #16
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80011de:	231f      	movs	r3, #31
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80011e6:	231f      	movs	r3, #31
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b008      	add	sp, #32
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000000 	.word	0x20000000
 80011f8:	00030d40 	.word	0x00030d40
 80011fc:	fffffefd 	.word	0xfffffefd
 8001200:	ffde0201 	.word	0xffde0201
 8001204:	1ffffc02 	.word	0x1ffffc02
 8001208:	40012708 	.word	0x40012708
 800120c:	ffc3ffff 	.word	0xffc3ffff
 8001210:	7fffff04 	.word	0x7fffff04

08001214 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121e:	2317      	movs	r3, #23
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2254      	movs	r2, #84	@ 0x54
 800122e:	5c9b      	ldrb	r3, [r3, r2]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_ADC_ConfigChannel+0x24>
 8001234:	2302      	movs	r3, #2
 8001236:	e1be      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x3a2>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2254      	movs	r2, #84	@ 0x54
 800123c:	2101      	movs	r1, #1
 800123e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff fe2e 	bl	8000ea6 <LL_ADC_REG_IsConversionOngoing>
 800124a:	1e03      	subs	r3, r0, #0
 800124c:	d000      	beq.n	8001250 <HAL_ADC_ConfigChannel+0x3c>
 800124e:	e1a1      	b.n	8001594 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d100      	bne.n	800125a <HAL_ADC_ConfigChannel+0x46>
 8001258:	e152      	b.n	8001500 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	061b      	lsls	r3, r3, #24
 8001262:	429a      	cmp	r2, r3
 8001264:	d004      	beq.n	8001270 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800126a:	4ac2      	ldr	r2, [pc, #776]	@ (8001574 <HAL_ADC_ConfigChannel+0x360>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d108      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0019      	movs	r1, r3
 800127a:	0010      	movs	r0, r2
 800127c:	f7ff fd9b 	bl	8000db6 <LL_ADC_REG_SetSequencerChAdd>
 8001280:	e0ed      	b.n	800145e <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	211f      	movs	r1, #31
 800128c:	400b      	ands	r3, r1
 800128e:	210f      	movs	r1, #15
 8001290:	4099      	lsls	r1, r3
 8001292:	000b      	movs	r3, r1
 8001294:	43db      	mvns	r3, r3
 8001296:	4013      	ands	r3, r2
 8001298:	0019      	movs	r1, r3
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	0a5b      	lsrs	r3, r3, #9
 80012a2:	d105      	bne.n	80012b0 <HAL_ADC_ConfigChannel+0x9c>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	0e9b      	lsrs	r3, r3, #26
 80012aa:	221f      	movs	r2, #31
 80012ac:	4013      	ands	r3, r2
 80012ae:	e0bc      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	d000      	beq.n	80012bc <HAL_ADC_ConfigChannel+0xa8>
 80012ba:	e0b5      	b.n	8001428 <HAL_ADC_ConfigChannel+0x214>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2202      	movs	r2, #2
 80012c2:	4013      	ands	r3, r2
 80012c4:	d000      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0xb4>
 80012c6:	e0ad      	b.n	8001424 <HAL_ADC_ConfigChannel+0x210>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2204      	movs	r2, #4
 80012ce:	4013      	ands	r3, r2
 80012d0:	d000      	beq.n	80012d4 <HAL_ADC_ConfigChannel+0xc0>
 80012d2:	e0a5      	b.n	8001420 <HAL_ADC_ConfigChannel+0x20c>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2208      	movs	r2, #8
 80012da:	4013      	ands	r3, r2
 80012dc:	d000      	beq.n	80012e0 <HAL_ADC_ConfigChannel+0xcc>
 80012de:	e09d      	b.n	800141c <HAL_ADC_ConfigChannel+0x208>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2210      	movs	r2, #16
 80012e6:	4013      	ands	r3, r2
 80012e8:	d000      	beq.n	80012ec <HAL_ADC_ConfigChannel+0xd8>
 80012ea:	e095      	b.n	8001418 <HAL_ADC_ConfigChannel+0x204>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2220      	movs	r2, #32
 80012f2:	4013      	ands	r3, r2
 80012f4:	d000      	beq.n	80012f8 <HAL_ADC_ConfigChannel+0xe4>
 80012f6:	e08d      	b.n	8001414 <HAL_ADC_ConfigChannel+0x200>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2240      	movs	r2, #64	@ 0x40
 80012fe:	4013      	ands	r3, r2
 8001300:	d000      	beq.n	8001304 <HAL_ADC_ConfigChannel+0xf0>
 8001302:	e085      	b.n	8001410 <HAL_ADC_ConfigChannel+0x1fc>
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	4013      	ands	r3, r2
 800130c:	d000      	beq.n	8001310 <HAL_ADC_ConfigChannel+0xfc>
 800130e:	e07d      	b.n	800140c <HAL_ADC_ConfigChannel+0x1f8>
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4013      	ands	r3, r2
 800131a:	d000      	beq.n	800131e <HAL_ADC_ConfigChannel+0x10a>
 800131c:	e074      	b.n	8001408 <HAL_ADC_ConfigChannel+0x1f4>
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4013      	ands	r3, r2
 8001328:	d000      	beq.n	800132c <HAL_ADC_ConfigChannel+0x118>
 800132a:	e06b      	b.n	8001404 <HAL_ADC_ConfigChannel+0x1f0>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4013      	ands	r3, r2
 8001336:	d000      	beq.n	800133a <HAL_ADC_ConfigChannel+0x126>
 8001338:	e062      	b.n	8001400 <HAL_ADC_ConfigChannel+0x1ec>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	@ 0x80
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4013      	ands	r3, r2
 8001344:	d000      	beq.n	8001348 <HAL_ADC_ConfigChannel+0x134>
 8001346:	e059      	b.n	80013fc <HAL_ADC_ConfigChannel+0x1e8>
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	4013      	ands	r3, r2
 8001352:	d151      	bne.n	80013f8 <HAL_ADC_ConfigChannel+0x1e4>
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	2380      	movs	r3, #128	@ 0x80
 800135a:	019b      	lsls	r3, r3, #6
 800135c:	4013      	ands	r3, r2
 800135e:	d149      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x1e0>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	01db      	lsls	r3, r3, #7
 8001368:	4013      	ands	r3, r2
 800136a:	d141      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x1dc>
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	4013      	ands	r3, r2
 8001376:	d139      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	025b      	lsls	r3, r3, #9
 8001380:	4013      	ands	r3, r2
 8001382:	d131      	bne.n	80013e8 <HAL_ADC_ConfigChannel+0x1d4>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	029b      	lsls	r3, r3, #10
 800138c:	4013      	ands	r3, r2
 800138e:	d129      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x1d0>
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	2380      	movs	r3, #128	@ 0x80
 8001396:	02db      	lsls	r3, r3, #11
 8001398:	4013      	ands	r3, r2
 800139a:	d121      	bne.n	80013e0 <HAL_ADC_ConfigChannel+0x1cc>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	2380      	movs	r3, #128	@ 0x80
 80013a2:	031b      	lsls	r3, r3, #12
 80013a4:	4013      	ands	r3, r2
 80013a6:	d119      	bne.n	80013dc <HAL_ADC_ConfigChannel+0x1c8>
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	035b      	lsls	r3, r3, #13
 80013b0:	4013      	ands	r3, r2
 80013b2:	d111      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1c4>
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	039b      	lsls	r3, r3, #14
 80013bc:	4013      	ands	r3, r2
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1c0>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	03db      	lsls	r3, r3, #15
 80013c8:	4013      	ands	r3, r2
 80013ca:	d001      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x1bc>
 80013cc:	2316      	movs	r3, #22
 80013ce:	e02c      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013d0:	2300      	movs	r3, #0
 80013d2:	e02a      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013d4:	2315      	movs	r3, #21
 80013d6:	e028      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013d8:	2314      	movs	r3, #20
 80013da:	e026      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013dc:	2313      	movs	r3, #19
 80013de:	e024      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013e0:	2312      	movs	r3, #18
 80013e2:	e022      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013e4:	2311      	movs	r3, #17
 80013e6:	e020      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013e8:	2310      	movs	r3, #16
 80013ea:	e01e      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013ec:	230f      	movs	r3, #15
 80013ee:	e01c      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013f0:	230e      	movs	r3, #14
 80013f2:	e01a      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013f4:	230d      	movs	r3, #13
 80013f6:	e018      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013f8:	230c      	movs	r3, #12
 80013fa:	e016      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 80013fc:	230b      	movs	r3, #11
 80013fe:	e014      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001400:	230a      	movs	r3, #10
 8001402:	e012      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001404:	2309      	movs	r3, #9
 8001406:	e010      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001408:	2308      	movs	r3, #8
 800140a:	e00e      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 800140c:	2307      	movs	r3, #7
 800140e:	e00c      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001410:	2306      	movs	r3, #6
 8001412:	e00a      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001414:	2305      	movs	r3, #5
 8001416:	e008      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001418:	2304      	movs	r3, #4
 800141a:	e006      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 800141c:	2303      	movs	r3, #3
 800141e:	e004      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001420:	2302      	movs	r3, #2
 8001422:	e002      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_ADC_ConfigChannel+0x216>
 8001428:	2300      	movs	r3, #0
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	6852      	ldr	r2, [r2, #4]
 800142e:	201f      	movs	r0, #31
 8001430:	4002      	ands	r2, r0
 8001432:	4093      	lsls	r3, r2
 8001434:	000a      	movs	r2, r1
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	429a      	cmp	r2, r3
 800144a:	d808      	bhi.n	800145e <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6818      	ldr	r0, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	001a      	movs	r2, r3
 800145a:	f7ff fc8c 	bl	8000d76 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6818      	ldr	r0, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	6819      	ldr	r1, [r3, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	001a      	movs	r2, r3
 800146c:	f7ff fcc6 	bl	8000dfc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db00      	blt.n	800147a <HAL_ADC_ConfigChannel+0x266>
 8001478:	e096      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <HAL_ADC_ConfigChannel+0x364>)
 800147c:	0018      	movs	r0, r3
 800147e:	f7ff fc39 	bl	8000cf4 <LL_ADC_GetCommonPathInternalCh>
 8001482:	0003      	movs	r3, r0
 8001484:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a3c      	ldr	r2, [pc, #240]	@ (800157c <HAL_ADC_ConfigChannel+0x368>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d123      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	2380      	movs	r3, #128	@ 0x80
 8001494:	041b      	lsls	r3, r3, #16
 8001496:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001498:	d11e      	bne.n	80014d8 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	2280      	movs	r2, #128	@ 0x80
 800149e:	0412      	lsls	r2, r2, #16
 80014a0:	4313      	orrs	r3, r2
 80014a2:	4a35      	ldr	r2, [pc, #212]	@ (8001578 <HAL_ADC_ConfigChannel+0x364>)
 80014a4:	0019      	movs	r1, r3
 80014a6:	0010      	movs	r0, r2
 80014a8:	f7ff fc10 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80014ac:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_ADC_ConfigChannel+0x36c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4934      	ldr	r1, [pc, #208]	@ (8001584 <HAL_ADC_ConfigChannel+0x370>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7fe fe28 	bl	8000108 <__udivsi3>
 80014b8:	0003      	movs	r3, r0
 80014ba:	001a      	movs	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	189b      	adds	r3, r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014c8:	e002      	b.n	80014d0 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f9      	bne.n	80014ca <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014d6:	e067      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a2a      	ldr	r2, [pc, #168]	@ (8001588 <HAL_ADC_ConfigChannel+0x374>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d162      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	03db      	lsls	r3, r3, #15
 80014e8:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80014ea:	d15d      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2280      	movs	r2, #128	@ 0x80
 80014f0:	03d2      	lsls	r2, r2, #15
 80014f2:	4313      	orrs	r3, r2
 80014f4:	4a20      	ldr	r2, [pc, #128]	@ (8001578 <HAL_ADC_ConfigChannel+0x364>)
 80014f6:	0019      	movs	r1, r3
 80014f8:	0010      	movs	r0, r2
 80014fa:	f7ff fbe7 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 80014fe:	e053      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	429a      	cmp	r2, r3
 800150a:	d004      	beq.n	8001516 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001510:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <HAL_ADC_ConfigChannel+0x360>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d107      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	0019      	movs	r1, r3
 8001520:	0010      	movs	r0, r2
 8001522:	f7ff fc59 	bl	8000dd8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	da3c      	bge.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800152e:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <HAL_ADC_ConfigChannel+0x364>)
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fbdf 	bl	8000cf4 <LL_ADC_GetCommonPathInternalCh>
 8001536:	0003      	movs	r3, r0
 8001538:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a0f      	ldr	r2, [pc, #60]	@ (800157c <HAL_ADC_ConfigChannel+0x368>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d108      	bne.n	8001556 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4a11      	ldr	r2, [pc, #68]	@ (800158c <HAL_ADC_ConfigChannel+0x378>)
 8001548:	4013      	ands	r3, r2
 800154a:	4a0b      	ldr	r2, [pc, #44]	@ (8001578 <HAL_ADC_ConfigChannel+0x364>)
 800154c:	0019      	movs	r1, r3
 800154e:	0010      	movs	r0, r2
 8001550:	f7ff fbbc 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 8001554:	e028      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <HAL_ADC_ConfigChannel+0x374>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d123      	bne.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	4a0b      	ldr	r2, [pc, #44]	@ (8001590 <HAL_ADC_ConfigChannel+0x37c>)
 8001564:	4013      	ands	r3, r2
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <HAL_ADC_ConfigChannel+0x364>)
 8001568:	0019      	movs	r1, r3
 800156a:	0010      	movs	r0, r2
 800156c:	f7ff fbae 	bl	8000ccc <LL_ADC_SetCommonPathInternalCh>
 8001570:	e01a      	b.n	80015a8 <HAL_ADC_ConfigChannel+0x394>
 8001572:	46c0      	nop			@ (mov r8, r8)
 8001574:	80000004 	.word	0x80000004
 8001578:	40012708 	.word	0x40012708
 800157c:	a4000200 	.word	0xa4000200
 8001580:	20000000 	.word	0x20000000
 8001584:	00030d40 	.word	0x00030d40
 8001588:	a8000400 	.word	0xa8000400
 800158c:	ff7fffff 	.word	0xff7fffff
 8001590:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001598:	2220      	movs	r2, #32
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015a0:	2317      	movs	r3, #23
 80015a2:	18fb      	adds	r3, r7, r3
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2254      	movs	r2, #84	@ 0x54
 80015ac:	2100      	movs	r1, #0
 80015ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80015b0:	2317      	movs	r3, #23
 80015b2:	18fb      	adds	r3, r7, r3
 80015b4:	781b      	ldrb	r3, [r3, #0]
}
 80015b6:	0018      	movs	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b006      	add	sp, #24
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	46c0      	nop			@ (mov r8, r8)

080015c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	0002      	movs	r2, r0
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80015d2:	d809      	bhi.n	80015e8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	001a      	movs	r2, r3
 80015da:	231f      	movs	r3, #31
 80015dc:	401a      	ands	r2, r3
 80015de:	4b04      	ldr	r3, [pc, #16]	@ (80015f0 <__NVIC_EnableIRQ+0x30>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	4091      	lsls	r1, r2
 80015e4:	000a      	movs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015e8:	46c0      	nop			@ (mov r8, r8)
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	e000e100 	.word	0xe000e100

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	0002      	movs	r2, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b7f      	cmp	r3, #127	@ 0x7f
 8001608:	d828      	bhi.n	800165c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160a:	4a2f      	ldr	r2, [pc, #188]	@ (80016c8 <__NVIC_SetPriority+0xd4>)
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b25b      	sxtb	r3, r3
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	33c0      	adds	r3, #192	@ 0xc0
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	589b      	ldr	r3, [r3, r2]
 800161a:	1dfa      	adds	r2, r7, #7
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	0011      	movs	r1, r2
 8001620:	2203      	movs	r2, #3
 8001622:	400a      	ands	r2, r1
 8001624:	00d2      	lsls	r2, r2, #3
 8001626:	21ff      	movs	r1, #255	@ 0xff
 8001628:	4091      	lsls	r1, r2
 800162a:	000a      	movs	r2, r1
 800162c:	43d2      	mvns	r2, r2
 800162e:	401a      	ands	r2, r3
 8001630:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	22ff      	movs	r2, #255	@ 0xff
 8001638:	401a      	ands	r2, r3
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	2303      	movs	r3, #3
 8001642:	4003      	ands	r3, r0
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001648:	481f      	ldr	r0, [pc, #124]	@ (80016c8 <__NVIC_SetPriority+0xd4>)
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	430a      	orrs	r2, r1
 8001654:	33c0      	adds	r3, #192	@ 0xc0
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800165a:	e031      	b.n	80016c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800165c:	4a1b      	ldr	r2, [pc, #108]	@ (80016cc <__NVIC_SetPriority+0xd8>)
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0019      	movs	r1, r3
 8001664:	230f      	movs	r3, #15
 8001666:	400b      	ands	r3, r1
 8001668:	3b08      	subs	r3, #8
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3306      	adds	r3, #6
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	18d3      	adds	r3, r2, r3
 8001672:	3304      	adds	r3, #4
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	1dfa      	adds	r2, r7, #7
 8001678:	7812      	ldrb	r2, [r2, #0]
 800167a:	0011      	movs	r1, r2
 800167c:	2203      	movs	r2, #3
 800167e:	400a      	ands	r2, r1
 8001680:	00d2      	lsls	r2, r2, #3
 8001682:	21ff      	movs	r1, #255	@ 0xff
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	43d2      	mvns	r2, r2
 800168a:	401a      	ands	r2, r3
 800168c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	019b      	lsls	r3, r3, #6
 8001692:	22ff      	movs	r2, #255	@ 0xff
 8001694:	401a      	ands	r2, r3
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	0018      	movs	r0, r3
 800169c:	2303      	movs	r3, #3
 800169e:	4003      	ands	r3, r0
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a4:	4809      	ldr	r0, [pc, #36]	@ (80016cc <__NVIC_SetPriority+0xd8>)
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	001c      	movs	r4, r3
 80016ac:	230f      	movs	r3, #15
 80016ae:	4023      	ands	r3, r4
 80016b0:	3b08      	subs	r3, #8
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	430a      	orrs	r2, r1
 80016b6:	3306      	adds	r3, #6
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	18c3      	adds	r3, r0, r3
 80016bc:	3304      	adds	r3, #4
 80016be:	601a      	str	r2, [r3, #0]
}
 80016c0:	46c0      	nop			@ (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b003      	add	sp, #12
 80016c6:	bd90      	pop	{r4, r7, pc}
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	1e5a      	subs	r2, r3, #1
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	045b      	lsls	r3, r3, #17
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d301      	bcc.n	80016e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e4:	2301      	movs	r3, #1
 80016e6:	e010      	b.n	800170a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <SysTick_Config+0x44>)
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	3a01      	subs	r2, #1
 80016ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f0:	2301      	movs	r3, #1
 80016f2:	425b      	negs	r3, r3
 80016f4:	2103      	movs	r1, #3
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff ff7c 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016fc:	4b05      	ldr	r3, [pc, #20]	@ (8001714 <SysTick_Config+0x44>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001702:	4b04      	ldr	r3, [pc, #16]	@ (8001714 <SysTick_Config+0x44>)
 8001704:	2207      	movs	r2, #7
 8001706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001708:	2300      	movs	r3, #0
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	b002      	add	sp, #8
 8001710:	bd80      	pop	{r7, pc}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	e000e010 	.word	0xe000e010

08001718 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
 8001722:	210f      	movs	r1, #15
 8001724:	187b      	adds	r3, r7, r1
 8001726:	1c02      	adds	r2, r0, #0
 8001728:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	187b      	adds	r3, r7, r1
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	b25b      	sxtb	r3, r3
 8001732:	0011      	movs	r1, r2
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	0002      	movs	r2, r0
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff ff33 	bl	80015c0 <__NVIC_EnableIRQ>
}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f7ff ffaf 	bl	80016d0 <SysTick_Config>
 8001772:	0003      	movs	r3, r0
}
 8001774:	0018      	movs	r0, r3
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800178a:	e14d      	b.n	8001a28 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4091      	lsls	r1, r2
 8001796:	000a      	movs	r2, r1
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d100      	bne.n	80017a4 <HAL_GPIO_Init+0x28>
 80017a2:	e13e      	b.n	8001a22 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x38>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d125      	bne.n	8001800 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	58d3      	ldr	r3, [r2, r3]
 80017c0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2207      	movs	r2, #7
 80017c6:	4013      	ands	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	409a      	lsls	r2, r3
 80017ce:	0013      	movs	r3, r2
 80017d0:	43da      	mvns	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	220f      	movs	r2, #15
 80017de:	401a      	ands	r2, r3
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	2107      	movs	r1, #7
 80017e4:	400b      	ands	r3, r1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	409a      	lsls	r2, r3
 80017ea:	0013      	movs	r3, r2
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	08da      	lsrs	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	3208      	adds	r2, #8
 80017fa:	0092      	lsls	r2, r2, #2
 80017fc:	6979      	ldr	r1, [r7, #20]
 80017fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2203      	movs	r2, #3
 800180c:	409a      	lsls	r2, r3
 800180e:	0013      	movs	r3, r2
 8001810:	43da      	mvns	r2, r3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	4013      	ands	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	401a      	ands	r2, r3
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	409a      	lsls	r2, r3
 8001826:	0013      	movs	r3, r2
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4313      	orrs	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d00b      	beq.n	8001854 <HAL_GPIO_Init+0xd8>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d007      	beq.n	8001854 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001848:	2b11      	cmp	r3, #17
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b12      	cmp	r3, #18
 8001852:	d130      	bne.n	80018b6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	43da      	mvns	r2, r3
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	4013      	ands	r3, r2
 800186a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	409a      	lsls	r2, r3
 8001876:	0013      	movs	r3, r2
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	4313      	orrs	r3, r2
 800187c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800188a:	2201      	movs	r2, #1
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	43da      	mvns	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4013      	ands	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	091b      	lsrs	r3, r3, #4
 80018a0:	2201      	movs	r2, #1
 80018a2:	401a      	ands	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d017      	beq.n	80018ee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	43da      	mvns	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4013      	ands	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	055b      	lsls	r3, r3, #21
 80018f6:	4013      	ands	r3, r2
 80018f8:	d100      	bne.n	80018fc <HAL_GPIO_Init+0x180>
 80018fa:	e092      	b.n	8001a22 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80018fc:	4a50      	ldr	r2, [pc, #320]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3318      	adds	r3, #24
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	589b      	ldr	r3, [r3, r2]
 8001908:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	2203      	movs	r2, #3
 800190e:	4013      	ands	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	220f      	movs	r2, #15
 8001914:	409a      	lsls	r2, r3
 8001916:	0013      	movs	r3, r2
 8001918:	43da      	mvns	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	23a0      	movs	r3, #160	@ 0xa0
 8001924:	05db      	lsls	r3, r3, #23
 8001926:	429a      	cmp	r2, r3
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0x1d6>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a45      	ldr	r2, [pc, #276]	@ (8001a44 <HAL_GPIO_Init+0x2c8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00d      	beq.n	800194e <HAL_GPIO_Init+0x1d2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a44      	ldr	r2, [pc, #272]	@ (8001a48 <HAL_GPIO_Init+0x2cc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <HAL_GPIO_Init+0x1ce>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a43      	ldr	r2, [pc, #268]	@ (8001a4c <HAL_GPIO_Init+0x2d0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_GPIO_Init+0x1ca>
 8001942:	2305      	movs	r3, #5
 8001944:	e006      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001946:	2306      	movs	r3, #6
 8001948:	e004      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 800194a:	2302      	movs	r3, #2
 800194c:	e002      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 800194e:	2301      	movs	r3, #1
 8001950:	e000      	b.n	8001954 <HAL_GPIO_Init+0x1d8>
 8001952:	2300      	movs	r3, #0
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	2103      	movs	r1, #3
 8001958:	400a      	ands	r2, r1
 800195a:	00d2      	lsls	r2, r2, #3
 800195c:	4093      	lsls	r3, r2
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001964:	4936      	ldr	r1, [pc, #216]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3318      	adds	r3, #24
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001972:	4a33      	ldr	r2, [pc, #204]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001974:	2380      	movs	r3, #128	@ 0x80
 8001976:	58d3      	ldr	r3, [r2, r3]
 8001978:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	43da      	mvns	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	4013      	ands	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	2380      	movs	r3, #128	@ 0x80
 800198a:	025b      	lsls	r3, r3, #9
 800198c:	4013      	ands	r3, r2
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001998:	4929      	ldr	r1, [pc, #164]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 800199a:	2280      	movs	r2, #128	@ 0x80
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80019a0:	4a27      	ldr	r2, [pc, #156]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019a2:	2384      	movs	r3, #132	@ 0x84
 80019a4:	58d3      	ldr	r3, [r2, r3]
 80019a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43da      	mvns	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4013      	ands	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	2380      	movs	r3, #128	@ 0x80
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80019c6:	491e      	ldr	r1, [pc, #120]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019c8:	2284      	movs	r2, #132	@ 0x84
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80019ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43da      	mvns	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4013      	ands	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	2380      	movs	r3, #128	@ 0x80
 80019e4:	035b      	lsls	r3, r3, #13
 80019e6:	4013      	ands	r3, r2
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80019f2:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43da      	mvns	r2, r3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	039b      	lsls	r3, r3, #14
 8001a10:	4013      	ands	r3, r2
 8001a12:	d003      	beq.n	8001a1c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001a1c:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <HAL_GPIO_Init+0x2c4>)
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	3301      	adds	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	40da      	lsrs	r2, r3
 8001a30:	1e13      	subs	r3, r2, #0
 8001a32:	d000      	beq.n	8001a36 <HAL_GPIO_Init+0x2ba>
 8001a34:	e6aa      	b.n	800178c <HAL_GPIO_Init+0x10>
  }
}
 8001a36:	46c0      	nop			@ (mov r8, r8)
 8001a38:	46c0      	nop			@ (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021800 	.word	0x40021800
 8001a44:	50000400 	.word	0x50000400
 8001a48:	50000800 	.word	0x50000800
 8001a4c:	50001400 	.word	0x50001400

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	0008      	movs	r0, r1
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	1cbb      	adds	r3, r7, #2
 8001a5e:	1c02      	adds	r2, r0, #0
 8001a60:	801a      	strh	r2, [r3, #0]
 8001a62:	1c7b      	adds	r3, r7, #1
 8001a64:	1c0a      	adds	r2, r1, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a68:	1c7b      	adds	r3, r7, #1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d004      	beq.n	8001a7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a70:	1cbb      	adds	r3, r7, #2
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a78:	e003      	b.n	8001a82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7a:	1cbb      	adds	r3, r7, #2
 8001a7c:	881a      	ldrh	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b002      	add	sp, #8
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1d0      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <HAL_RCC_OscConfig+0x1e>
 8001aa8:	e069      	b.n	8001b7e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aaa:	4bc8      	ldr	r3, [pc, #800]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2238      	movs	r2, #56	@ 0x38
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d105      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d15d      	bne.n	8001b7e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1bc      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	025b      	lsls	r3, r3, #9
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x56>
 8001ad2:	4bbe      	ldr	r3, [pc, #760]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4bbd      	ldr	r3, [pc, #756]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001ad8:	2180      	movs	r1, #128	@ 0x80
 8001ada:	0249      	lsls	r1, r1, #9
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e020      	b.n	8001b24 <HAL_RCC_OscConfig+0x98>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	23a0      	movs	r3, #160	@ 0xa0
 8001ae8:	02db      	lsls	r3, r3, #11
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d10e      	bne.n	8001b0c <HAL_RCC_OscConfig+0x80>
 8001aee:	4bb7      	ldr	r3, [pc, #732]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4bb6      	ldr	r3, [pc, #728]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	02c9      	lsls	r1, r1, #11
 8001af8:	430a      	orrs	r2, r1
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4bb3      	ldr	r3, [pc, #716]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4bb2      	ldr	r3, [pc, #712]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b02:	2180      	movs	r1, #128	@ 0x80
 8001b04:	0249      	lsls	r1, r1, #9
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x98>
 8001b0c:	4baf      	ldr	r3, [pc, #700]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4bae      	ldr	r3, [pc, #696]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b12:	49af      	ldr	r1, [pc, #700]	@ (8001dd0 <HAL_RCC_OscConfig+0x344>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	4bac      	ldr	r3, [pc, #688]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4bab      	ldr	r3, [pc, #684]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b1e:	49ad      	ldr	r1, [pc, #692]	@ (8001dd4 <HAL_RCC_OscConfig+0x348>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d014      	beq.n	8001b56 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff f8a0 	bl	8000c70 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b36:	f7ff f89b 	bl	8000c70 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	@ 0x64
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e17b      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b48:	4ba0      	ldr	r3, [pc, #640]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	029b      	lsls	r3, r3, #10
 8001b50:	4013      	ands	r3, r2
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0xaa>
 8001b54:	e013      	b.n	8001b7e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b56:	f7ff f88b 	bl	8000c70 <HAL_GetTick>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b60:	f7ff f886 	bl	8000c70 <HAL_GetTick>
 8001b64:	0002      	movs	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	@ 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e166      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b72:	4b96      	ldr	r3, [pc, #600]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	2380      	movs	r3, #128	@ 0x80
 8001b78:	029b      	lsls	r3, r3, #10
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d100      	bne.n	8001b8a <HAL_RCC_OscConfig+0xfe>
 8001b88:	e086      	b.n	8001c98 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b90      	ldr	r3, [pc, #576]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2238      	movs	r2, #56	@ 0x38
 8001b90:	4013      	ands	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d12f      	bne.n	8001bfa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e14c      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba6:	4b89      	ldr	r3, [pc, #548]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a8b      	ldr	r2, [pc, #556]	@ (8001dd8 <HAL_RCC_OscConfig+0x34c>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	021a      	lsls	r2, r3, #8
 8001bb6:	4b85      	ldr	r3, [pc, #532]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d112      	bne.n	8001be8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bc2:	4b82      	ldr	r3, [pc, #520]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a85      	ldr	r2, [pc, #532]	@ (8001ddc <HAL_RCC_OscConfig+0x350>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0adb      	lsrs	r3, r3, #11
 8001bdc:	2207      	movs	r2, #7
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a7f      	ldr	r2, [pc, #508]	@ (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	4b7f      	ldr	r3, [pc, #508]	@ (8001de4 <HAL_RCC_OscConfig+0x358>)
 8001be6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001be8:	4b7f      	ldr	r3, [pc, #508]	@ (8001de8 <HAL_RCC_OscConfig+0x35c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7fe ffe3 	bl	8000bb8 <HAL_InitTick>
 8001bf2:	1e03      	subs	r3, r0, #0
 8001bf4:	d050      	beq.n	8001c98 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e122      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d030      	beq.n	8001c64 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c02:	4b72      	ldr	r3, [pc, #456]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a75      	ldr	r2, [pc, #468]	@ (8001ddc <HAL_RCC_OscConfig+0x350>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691a      	ldr	r2, [r3, #16]
 8001c10:	4b6e      	ldr	r3, [pc, #440]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001c16:	4b6d      	ldr	r3, [pc, #436]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c1c:	2180      	movs	r1, #128	@ 0x80
 8001c1e:	0049      	lsls	r1, r1, #1
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c24:	f7ff f824 	bl	8000c70 <HAL_GetTick>
 8001c28:	0003      	movs	r3, r0
 8001c2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff f81f 	bl	8000c70 <HAL_GetTick>
 8001c32:	0002      	movs	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e0ff      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	4b62      	ldr	r3, [pc, #392]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b5f      	ldr	r3, [pc, #380]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a61      	ldr	r2, [pc, #388]	@ (8001dd8 <HAL_RCC_OscConfig+0x34c>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	021a      	lsls	r2, r3, #8
 8001c5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	e019      	b.n	8001c98 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001c64:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b58      	ldr	r3, [pc, #352]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c6a:	4960      	ldr	r1, [pc, #384]	@ (8001dec <HAL_RCC_OscConfig+0x360>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7fe fffe 	bl	8000c70 <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c7a:	f7fe fff9 	bl	8000c70 <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e0d9      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4013      	ands	r3, r2
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d042      	beq.n	8001d28 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2238      	movs	r2, #56	@ 0x38
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b18      	cmp	r3, #24
 8001cac:	d105      	bne.n	8001cba <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d138      	bne.n	8001d28 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e0c2      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d019      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b42      	ldr	r3, [pc, #264]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001cc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cc6:	4b41      	ldr	r3, [pc, #260]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cce:	f7fe ffcf 	bl	8000c70 <HAL_GetTick>
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cd8:	f7fe ffca 	bl	8000c70 <HAL_GetTick>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e0aa      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001cea:	4b38      	ldr	r3, [pc, #224]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0f1      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x24c>
 8001cf4:	e018      	b.n	8001d28 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cf6:	4b35      	ldr	r3, [pc, #212]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001cf8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cfa:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	438a      	bics	r2, r1
 8001d00:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d02:	f7fe ffb5 	bl	8000c70 <HAL_GetTick>
 8001d06:	0003      	movs	r3, r0
 8001d08:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe ffb0 	bl	8000c70 <HAL_GetTick>
 8001d10:	0002      	movs	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e090      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	2202      	movs	r2, #2
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1f1      	bne.n	8001d0c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d100      	bne.n	8001d34 <HAL_RCC_OscConfig+0x2a8>
 8001d32:	e084      	b.n	8001e3e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d34:	230f      	movs	r3, #15
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d3c:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2238      	movs	r2, #56	@ 0x38
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d000      	beq.n	8001d52 <HAL_RCC_OscConfig+0x2c6>
 8001d50:	e075      	b.n	8001e3e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e074      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x2e0>
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d60:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	430a      	orrs	r2, r1
 8001d68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d6a:	e01c      	b.n	8001da6 <HAL_RCC_OscConfig+0x31a>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b05      	cmp	r3, #5
 8001d72:	d10c      	bne.n	8001d8e <HAL_RCC_OscConfig+0x302>
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d78:	4b14      	ldr	r3, [pc, #80]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d80:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d8c:	e00b      	b.n	8001da6 <HAL_RCC_OscConfig+0x31a>
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	438a      	bics	r2, r1
 8001d98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001d9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <HAL_RCC_OscConfig+0x340>)
 8001da0:	2104      	movs	r1, #4
 8001da2:	438a      	bics	r2, r1
 8001da4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d028      	beq.n	8001e00 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dae:	f7fe ff5f 	bl	8000c70 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7fe ff5a 	bl	8000c70 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001df0 <HAL_RCC_OscConfig+0x364>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d915      	bls.n	8001df4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e039      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	fffeffff 	.word	0xfffeffff
 8001dd4:	fffbffff 	.word	0xfffbffff
 8001dd8:	ffff80ff 	.word	0xffff80ff
 8001ddc:	ffffc7ff 	.word	0xffffc7ff
 8001de0:	02dc6c00 	.word	0x02dc6c00
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004
 8001dec:	fffffeff 	.word	0xfffffeff
 8001df0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001df4:	4b14      	ldr	r3, [pc, #80]	@ (8001e48 <HAL_RCC_OscConfig+0x3bc>)
 8001df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d0dc      	beq.n	8001db8 <HAL_RCC_OscConfig+0x32c>
 8001dfe:	e013      	b.n	8001e28 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe ff36 	bl	8000c70 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001e08:	e009      	b.n	8001e1e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ff31 	bl	8000c70 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_RCC_OscConfig+0x3c0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e010      	b.n	8001e40 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_RCC_OscConfig+0x3bc>)
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2202      	movs	r2, #2
 8001e24:	4013      	ands	r3, r2
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d105      	bne.n	8001e3e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b05      	ldr	r3, [pc, #20]	@ (8001e48 <HAL_RCC_OscConfig+0x3bc>)
 8001e34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e36:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <HAL_RCC_OscConfig+0x3bc>)
 8001e38:	4905      	ldr	r1, [pc, #20]	@ (8001e50 <HAL_RCC_OscConfig+0x3c4>)
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	0018      	movs	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b006      	add	sp, #24
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	00001388 	.word	0x00001388
 8001e50:	efffffff 	.word	0xefffffff

08001e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0df      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b71      	ldr	r3, [pc, #452]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2207      	movs	r2, #7
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d91e      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b6e      	ldr	r3, [pc, #440]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	4b6b      	ldr	r3, [pc, #428]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e88:	f7fe fef2 	bl	8000c70 <HAL_GetTick>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e90:	e009      	b.n	8001ea6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e92:	f7fe feed 	bl	8000c70 <HAL_GetTick>
 8001e96:	0002      	movs	r2, r0
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	4a65      	ldr	r2, [pc, #404]	@ (8002034 <HAL_RCC_ClockConfig+0x1e0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0c0      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ea6:	4b62      	ldr	r3, [pc, #392]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2207      	movs	r2, #7
 8001eac:	4013      	ands	r3, r2
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d017      	beq.n	8001eee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a5b      	ldr	r2, [pc, #364]	@ (800203c <HAL_RCC_ClockConfig+0x1e8>)
 8001ece:	401a      	ands	r2, r3
 8001ed0:	4b59      	ldr	r3, [pc, #356]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001ed2:	21b0      	movs	r1, #176	@ 0xb0
 8001ed4:	0109      	lsls	r1, r1, #4
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eda:	4b57      	ldr	r3, [pc, #348]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4a58      	ldr	r2, [pc, #352]	@ (8002040 <HAL_RCC_ClockConfig+0x1ec>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	4b53      	ldr	r3, [pc, #332]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d04b      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f00:	4b4d      	ldr	r3, [pc, #308]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d11f      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e08b      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f18:	4b47      	ldr	r3, [pc, #284]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2380      	movs	r3, #128	@ 0x80
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4013      	ands	r3, r2
 8001f22:	d113      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e07f      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d106      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001f30:	4b41      	ldr	r3, [pc, #260]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f34:	2202      	movs	r2, #2
 8001f36:	4013      	ands	r3, r2
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e074      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d101      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e06d      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2207      	movs	r2, #7
 8001f52:	4393      	bics	r3, r2
 8001f54:	0019      	movs	r1, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f60:	f7fe fe86 	bl	8000c70 <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	e009      	b.n	8001f7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6a:	f7fe fe81 	bl	8000c70 <HAL_GetTick>
 8001f6e:	0002      	movs	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	4a2f      	ldr	r2, [pc, #188]	@ (8002034 <HAL_RCC_ClockConfig+0x1e0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e054      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	4b2e      	ldr	r3, [pc, #184]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	@ 0x38
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d1ec      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f90:	4b27      	ldr	r3, [pc, #156]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2207      	movs	r2, #7
 8001f96:	4013      	ands	r3, r2
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d21e      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b24      	ldr	r3, [pc, #144]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2207      	movs	r2, #7
 8001fa4:	4393      	bics	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	4b21      	ldr	r3, [pc, #132]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fe5e 	bl	8000c70 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fb8:	e009      	b.n	8001fce <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fba:	f7fe fe59 	bl	8000c70 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	4a1b      	ldr	r2, [pc, #108]	@ (8002034 <HAL_RCC_ClockConfig+0x1e0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e02c      	b.n	8002028 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fce:	4b18      	ldr	r3, [pc, #96]	@ (8002030 <HAL_RCC_ClockConfig+0x1dc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2207      	movs	r2, #7
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2204      	movs	r2, #4
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe6:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	4a16      	ldr	r2, [pc, #88]	@ (8002044 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	4013      	ands	r3, r2
 8001fee:	0019      	movs	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691a      	ldr	r2, [r3, #16]
 8001ff4:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ffa:	f000 f82b 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8001ffe:	0001      	movs	r1, r0
 8002000:	4b0d      	ldr	r3, [pc, #52]	@ (8002038 <HAL_RCC_ClockConfig+0x1e4>)
 8002002:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	220f      	movs	r2, #15
 8002008:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800200a:	4b0f      	ldr	r3, [pc, #60]	@ (8002048 <HAL_RCC_ClockConfig+0x1f4>)
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002010:	221f      	movs	r2, #31
 8002012:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002014:	000a      	movs	r2, r1
 8002016:	40da      	lsrs	r2, r3
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <HAL_RCC_ClockConfig+0x1fc>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0018      	movs	r0, r3
 8002022:	f7fe fdc9 	bl	8000bb8 <HAL_InitTick>
 8002026:	0003      	movs	r3, r0
}
 8002028:	0018      	movs	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	b004      	add	sp, #16
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40022000 	.word	0x40022000
 8002034:	00001388 	.word	0x00001388
 8002038:	40021000 	.word	0x40021000
 800203c:	ffff84ff 	.word	0xffff84ff
 8002040:	fffff0ff 	.word	0xfffff0ff
 8002044:	ffff8fff 	.word	0xffff8fff
 8002048:	08003ca4 	.word	0x08003ca4
 800204c:	20000000 	.word	0x20000000
 8002050:	20000004 	.word	0x20000004

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800205a:	4b1c      	ldr	r3, [pc, #112]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x78>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2238      	movs	r2, #56	@ 0x38
 8002060:	4013      	ands	r3, r2
 8002062:	d10f      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002064:	4b19      	ldr	r3, [pc, #100]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x78>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	0adb      	lsrs	r3, r3, #11
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	2201      	movs	r2, #1
 8002070:	409a      	lsls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002076:	6839      	ldr	r1, [r7, #0]
 8002078:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800207a:	f7fe f845 	bl	8000108 <__udivsi3>
 800207e:	0003      	movs	r3, r0
 8002080:	607b      	str	r3, [r7, #4]
 8002082:	e01e      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002084:	4b11      	ldr	r3, [pc, #68]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x78>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2238      	movs	r2, #56	@ 0x38
 800208a:	4013      	ands	r3, r2
 800208c:	2b08      	cmp	r3, #8
 800208e:	d102      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x80>)
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	e015      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x78>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2238      	movs	r2, #56	@ 0x38
 800209c:	4013      	ands	r3, r2
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d103      	bne.n	80020aa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80020a2:	2380      	movs	r3, #128	@ 0x80
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	e00b      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x78>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2238      	movs	r2, #56	@ 0x38
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b18      	cmp	r3, #24
 80020b4:	d103      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020b6:	23fa      	movs	r3, #250	@ 0xfa
 80020b8:	01db      	lsls	r3, r3, #7
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	e001      	b.n	80020c2 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80020c2:	687b      	ldr	r3, [r7, #4]
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40021000 	.word	0x40021000
 80020d0:	02dc6c00 	.word	0x02dc6c00
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80020e0:	2313      	movs	r3, #19
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2200      	movs	r2, #0
 80020e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020e8:	2312      	movs	r3, #18
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	4013      	ands	r3, r2
 80020f8:	d100      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x24>
 80020fa:	e079      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fc:	2011      	movs	r0, #17
 80020fe:	183b      	adds	r3, r7, r0
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002104:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002106:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002108:	2380      	movs	r3, #128	@ 0x80
 800210a:	055b      	lsls	r3, r3, #21
 800210c:	4013      	ands	r3, r2
 800210e:	d110      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	4b60      	ldr	r3, [pc, #384]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002112:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002114:	4b5f      	ldr	r3, [pc, #380]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002116:	2180      	movs	r1, #128	@ 0x80
 8002118:	0549      	lsls	r1, r1, #21
 800211a:	430a      	orrs	r2, r1
 800211c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800211e:	4b5d      	ldr	r3, [pc, #372]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002120:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002122:	2380      	movs	r3, #128	@ 0x80
 8002124:	055b      	lsls	r3, r3, #21
 8002126:	4013      	ands	r3, r2
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212c:	183b      	adds	r3, r7, r0
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002132:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002134:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002136:	23c0      	movs	r3, #192	@ 0xc0
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4013      	ands	r3, r2
 800213c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d019      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	429a      	cmp	r2, r3
 800214c:	d014      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800214e:	4b51      	ldr	r3, [pc, #324]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	4a51      	ldr	r2, [pc, #324]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002154:	4013      	ands	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002158:	4b4e      	ldr	r3, [pc, #312]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215c:	4b4d      	ldr	r3, [pc, #308]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215e:	2180      	movs	r1, #128	@ 0x80
 8002160:	0249      	lsls	r1, r1, #9
 8002162:	430a      	orrs	r2, r1
 8002164:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002166:	4b4b      	ldr	r3, [pc, #300]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002168:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800216a:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800216c:	494b      	ldr	r1, [pc, #300]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800216e:	400a      	ands	r2, r1
 8002170:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002172:	4b48      	ldr	r3, [pc, #288]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d016      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fd76 	bl	8000c70 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002188:	e00c      	b.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe fd71 	bl	8000c70 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a42      	ldr	r2, [pc, #264]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d904      	bls.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800219a:	2313      	movs	r3, #19
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	2203      	movs	r2, #3
 80021a0:	701a      	strb	r2, [r3, #0]
          break;
 80021a2:	e004      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021a8:	2202      	movs	r2, #2
 80021aa:	4013      	ands	r3, r2
 80021ac:	d0ed      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80021ae:	2313      	movs	r3, #19
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021bc:	4a36      	ldr	r2, [pc, #216]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699a      	ldr	r2, [r3, #24]
 80021c6:	4b33      	ldr	r3, [pc, #204]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021cc:	e005      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ce:	2312      	movs	r3, #18
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	2213      	movs	r2, #19
 80021d4:	18ba      	adds	r2, r7, r2
 80021d6:	7812      	ldrb	r2, [r2, #0]
 80021d8:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021da:	2311      	movs	r3, #17
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80021e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ea:	492e      	ldr	r1, [pc, #184]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80021ec:	400a      	ands	r2, r1
 80021ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	2203      	movs	r2, #3
 8002200:	4393      	bics	r3, r2
 8002202:	0019      	movs	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800220a:	430a      	orrs	r2, r1
 800220c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2202      	movs	r2, #2
 8002214:	4013      	ands	r3, r2
 8002216:	d009      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002218:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800221a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800221c:	4a22      	ldr	r2, [pc, #136]	@ (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800221e:	4013      	ands	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002228:	430a      	orrs	r2, r1
 800222a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2220      	movs	r2, #32
 8002232:	4013      	ands	r3, r2
 8002234:	d008      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002236:	4b17      	ldr	r3, [pc, #92]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	0899      	lsrs	r1, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695a      	ldr	r2, [r3, #20]
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002244:	430a      	orrs	r2, r1
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2204      	movs	r2, #4
 800224e:	4013      	ands	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002252:	4b10      	ldr	r3, [pc, #64]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002256:	4a15      	ldr	r2, [pc, #84]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002258:	4013      	ands	r3, r2
 800225a:	0019      	movs	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002262:	430a      	orrs	r2, r1
 8002264:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2280      	movs	r2, #128	@ 0x80
 800226c:	4013      	ands	r3, r2
 800226e:	d009      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002270:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	22e0      	movs	r2, #224	@ 0xe0
 8002276:	4393      	bics	r3, r2
 8002278:	0019      	movs	r1, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002280:	430a      	orrs	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002284:	2312      	movs	r3, #18
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b006      	add	sp, #24
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	40021000 	.word	0x40021000
 8002298:	fffffcff 	.word	0xfffffcff
 800229c:	fffeffff 	.word	0xfffeffff
 80022a0:	00001388 	.word	0x00001388
 80022a4:	efffffff 	.word	0xefffffff
 80022a8:	ffffcfff 	.word	0xffffcfff
 80022ac:	ffff3fff 	.word	0xffff3fff

080022b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e04a      	b.n	8002358 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	223d      	movs	r2, #61	@ 0x3d
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d107      	bne.n	80022de <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223c      	movs	r2, #60	@ 0x3c
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7fe fb29 	bl	8000930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	223d      	movs	r2, #61	@ 0x3d
 80022e2:	2102      	movs	r1, #2
 80022e4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3304      	adds	r3, #4
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f000 fea1 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2248      	movs	r2, #72	@ 0x48
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	223e      	movs	r2, #62	@ 0x3e
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223f      	movs	r2, #63	@ 0x3f
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2240      	movs	r2, #64	@ 0x40
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2241      	movs	r2, #65	@ 0x41
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2242      	movs	r2, #66	@ 0x42
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2243      	movs	r2, #67	@ 0x43
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2244      	movs	r2, #68	@ 0x44
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2245      	movs	r2, #69	@ 0x45
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2246      	movs	r2, #70	@ 0x46
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2247      	movs	r2, #71	@ 0x47
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	223d      	movs	r2, #61	@ 0x3d
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e04a      	b.n	8002408 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	223d      	movs	r2, #61	@ 0x3d
 8002376:	5c9b      	ldrb	r3, [r3, r2]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	223c      	movs	r2, #60	@ 0x3c
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f000 f841 	bl	8002410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	223d      	movs	r2, #61	@ 0x3d
 8002392:	2102      	movs	r1, #2
 8002394:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3304      	adds	r3, #4
 800239e:	0019      	movs	r1, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	f000 fe49 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2248      	movs	r2, #72	@ 0x48
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223e      	movs	r2, #62	@ 0x3e
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	223f      	movs	r2, #63	@ 0x3f
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2240      	movs	r2, #64	@ 0x40
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2241      	movs	r2, #65	@ 0x41
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2242      	movs	r2, #66	@ 0x42
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2243      	movs	r2, #67	@ 0x43
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2244      	movs	r2, #68	@ 0x44
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2245      	movs	r2, #69	@ 0x45
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2246      	movs	r2, #70	@ 0x46
 80023f2:	2101      	movs	r1, #1
 80023f4:	5499      	strb	r1, [r3, r2]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2247      	movs	r2, #71	@ 0x47
 80023fa:	2101      	movs	r1, #1
 80023fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	223d      	movs	r2, #61	@ 0x3d
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	0018      	movs	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002418:	46c0      	nop			@ (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b002      	add	sp, #8
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d108      	bne.n	8002442 <HAL_TIM_PWM_Start+0x22>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	223e      	movs	r2, #62	@ 0x3e
 8002434:	5c9b      	ldrb	r3, [r3, r2]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	1e5a      	subs	r2, r3, #1
 800243c:	4193      	sbcs	r3, r2
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e037      	b.n	80024b2 <HAL_TIM_PWM_Start+0x92>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b04      	cmp	r3, #4
 8002446:	d108      	bne.n	800245a <HAL_TIM_PWM_Start+0x3a>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	223f      	movs	r2, #63	@ 0x3f
 800244c:	5c9b      	ldrb	r3, [r3, r2]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	1e5a      	subs	r2, r3, #1
 8002454:	4193      	sbcs	r3, r2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	e02b      	b.n	80024b2 <HAL_TIM_PWM_Start+0x92>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d108      	bne.n	8002472 <HAL_TIM_PWM_Start+0x52>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2240      	movs	r2, #64	@ 0x40
 8002464:	5c9b      	ldrb	r3, [r3, r2]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	4193      	sbcs	r3, r2
 800246e:	b2db      	uxtb	r3, r3
 8002470:	e01f      	b.n	80024b2 <HAL_TIM_PWM_Start+0x92>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	2b0c      	cmp	r3, #12
 8002476:	d108      	bne.n	800248a <HAL_TIM_PWM_Start+0x6a>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2241      	movs	r2, #65	@ 0x41
 800247c:	5c9b      	ldrb	r3, [r3, r2]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	4193      	sbcs	r3, r2
 8002486:	b2db      	uxtb	r3, r3
 8002488:	e013      	b.n	80024b2 <HAL_TIM_PWM_Start+0x92>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b10      	cmp	r3, #16
 800248e:	d108      	bne.n	80024a2 <HAL_TIM_PWM_Start+0x82>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2242      	movs	r2, #66	@ 0x42
 8002494:	5c9b      	ldrb	r3, [r3, r2]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	4193      	sbcs	r3, r2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	e007      	b.n	80024b2 <HAL_TIM_PWM_Start+0x92>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2243      	movs	r2, #67	@ 0x43
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	1e5a      	subs	r2, r3, #1
 80024ae:	4193      	sbcs	r3, r2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e07b      	b.n	80025b2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <HAL_TIM_PWM_Start+0xaa>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	223e      	movs	r2, #62	@ 0x3e
 80024c4:	2102      	movs	r1, #2
 80024c6:	5499      	strb	r1, [r3, r2]
 80024c8:	e023      	b.n	8002512 <HAL_TIM_PWM_Start+0xf2>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d104      	bne.n	80024da <HAL_TIM_PWM_Start+0xba>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	223f      	movs	r2, #63	@ 0x3f
 80024d4:	2102      	movs	r1, #2
 80024d6:	5499      	strb	r1, [r3, r2]
 80024d8:	e01b      	b.n	8002512 <HAL_TIM_PWM_Start+0xf2>
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d104      	bne.n	80024ea <HAL_TIM_PWM_Start+0xca>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2240      	movs	r2, #64	@ 0x40
 80024e4:	2102      	movs	r1, #2
 80024e6:	5499      	strb	r1, [r3, r2]
 80024e8:	e013      	b.n	8002512 <HAL_TIM_PWM_Start+0xf2>
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b0c      	cmp	r3, #12
 80024ee:	d104      	bne.n	80024fa <HAL_TIM_PWM_Start+0xda>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2241      	movs	r2, #65	@ 0x41
 80024f4:	2102      	movs	r1, #2
 80024f6:	5499      	strb	r1, [r3, r2]
 80024f8:	e00b      	b.n	8002512 <HAL_TIM_PWM_Start+0xf2>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b10      	cmp	r3, #16
 80024fe:	d104      	bne.n	800250a <HAL_TIM_PWM_Start+0xea>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2242      	movs	r2, #66	@ 0x42
 8002504:	2102      	movs	r1, #2
 8002506:	5499      	strb	r1, [r3, r2]
 8002508:	e003      	b.n	8002512 <HAL_TIM_PWM_Start+0xf2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2243      	movs	r2, #67	@ 0x43
 800250e:	2102      	movs	r1, #2
 8002510:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	2201      	movs	r2, #1
 800251a:	0018      	movs	r0, r3
 800251c:	f001 fa50 	bl	80039c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a25      	ldr	r2, [pc, #148]	@ (80025bc <HAL_TIM_PWM_Start+0x19c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_TIM_PWM_Start+0x11e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a24      	ldr	r2, [pc, #144]	@ (80025c0 <HAL_TIM_PWM_Start+0x1a0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_TIM_PWM_Start+0x11e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a22      	ldr	r2, [pc, #136]	@ (80025c4 <HAL_TIM_PWM_Start+0x1a4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_TIM_PWM_Start+0x122>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_TIM_PWM_Start+0x124>
 8002542:	2300      	movs	r3, #0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2180      	movs	r1, #128	@ 0x80
 8002554:	0209      	lsls	r1, r1, #8
 8002556:	430a      	orrs	r2, r1
 8002558:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_TIM_PWM_Start+0x19c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_TIM_PWM_Start+0x14e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a17      	ldr	r2, [pc, #92]	@ (80025c8 <HAL_TIM_PWM_Start+0x1a8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d116      	bne.n	800259c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a15      	ldr	r2, [pc, #84]	@ (80025cc <HAL_TIM_PWM_Start+0x1ac>)
 8002576:	4013      	ands	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b06      	cmp	r3, #6
 800257e:	d016      	beq.n	80025ae <HAL_TIM_PWM_Start+0x18e>
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	025b      	lsls	r3, r3, #9
 8002586:	429a      	cmp	r2, r3
 8002588:	d011      	beq.n	80025ae <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2101      	movs	r1, #1
 8002596:	430a      	orrs	r2, r1
 8002598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259a:	e008      	b.n	80025ae <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2101      	movs	r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e000      	b.n	80025b0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ae:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40014400 	.word	0x40014400
 80025c4:	40014800 	.word	0x40014800
 80025c8:	40000400 	.word	0x40000400
 80025cc:	00010007 	.word	0x00010007

080025d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e04a      	b.n	8002678 <HAL_TIM_IC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223d      	movs	r2, #61	@ 0x3d
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d107      	bne.n	80025fe <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	223c      	movs	r2, #60	@ 0x3c
 80025f2:	2100      	movs	r1, #0
 80025f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 f841 	bl	8002680 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	223d      	movs	r2, #61	@ 0x3d
 8002602:	2102      	movs	r1, #2
 8002604:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	0019      	movs	r1, r3
 8002610:	0010      	movs	r0, r2
 8002612:	f000 fd11 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2248      	movs	r2, #72	@ 0x48
 800261a:	2101      	movs	r1, #1
 800261c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	223e      	movs	r2, #62	@ 0x3e
 8002622:	2101      	movs	r1, #1
 8002624:	5499      	strb	r1, [r3, r2]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	223f      	movs	r2, #63	@ 0x3f
 800262a:	2101      	movs	r1, #1
 800262c:	5499      	strb	r1, [r3, r2]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2240      	movs	r2, #64	@ 0x40
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2241      	movs	r2, #65	@ 0x41
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2242      	movs	r2, #66	@ 0x42
 8002642:	2101      	movs	r1, #1
 8002644:	5499      	strb	r1, [r3, r2]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2243      	movs	r2, #67	@ 0x43
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2244      	movs	r2, #68	@ 0x44
 8002652:	2101      	movs	r1, #1
 8002654:	5499      	strb	r1, [r3, r2]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2245      	movs	r2, #69	@ 0x45
 800265a:	2101      	movs	r1, #1
 800265c:	5499      	strb	r1, [r3, r2]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2246      	movs	r2, #70	@ 0x46
 8002662:	2101      	movs	r1, #1
 8002664:	5499      	strb	r1, [r3, r2]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2247      	movs	r2, #71	@ 0x47
 800266a:	2101      	movs	r1, #1
 800266c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223d      	movs	r2, #61	@ 0x3d
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002676:	2300      	movs	r3, #0
}
 8002678:	0018      	movs	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002688:	46c0      	nop			@ (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	230f      	movs	r3, #15
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d104      	bne.n	80026b2 <HAL_TIM_IC_Start_IT+0x22>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	223e      	movs	r2, #62	@ 0x3e
 80026ac:	5c9b      	ldrb	r3, [r3, r2]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e023      	b.n	80026fa <HAL_TIM_IC_Start_IT+0x6a>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d104      	bne.n	80026c2 <HAL_TIM_IC_Start_IT+0x32>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	223f      	movs	r2, #63	@ 0x3f
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	e01b      	b.n	80026fa <HAL_TIM_IC_Start_IT+0x6a>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d104      	bne.n	80026d2 <HAL_TIM_IC_Start_IT+0x42>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2240      	movs	r2, #64	@ 0x40
 80026cc:	5c9b      	ldrb	r3, [r3, r2]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	e013      	b.n	80026fa <HAL_TIM_IC_Start_IT+0x6a>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	d104      	bne.n	80026e2 <HAL_TIM_IC_Start_IT+0x52>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2241      	movs	r2, #65	@ 0x41
 80026dc:	5c9b      	ldrb	r3, [r3, r2]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e00b      	b.n	80026fa <HAL_TIM_IC_Start_IT+0x6a>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d104      	bne.n	80026f2 <HAL_TIM_IC_Start_IT+0x62>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2242      	movs	r2, #66	@ 0x42
 80026ec:	5c9b      	ldrb	r3, [r3, r2]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	e003      	b.n	80026fa <HAL_TIM_IC_Start_IT+0x6a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2243      	movs	r2, #67	@ 0x43
 80026f6:	5c9b      	ldrb	r3, [r3, r2]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	220e      	movs	r2, #14
 80026fc:	18ba      	adds	r2, r7, r2
 80026fe:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d104      	bne.n	8002710 <HAL_TIM_IC_Start_IT+0x80>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2244      	movs	r2, #68	@ 0x44
 800270a:	5c9b      	ldrb	r3, [r3, r2]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e013      	b.n	8002738 <HAL_TIM_IC_Start_IT+0xa8>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d104      	bne.n	8002720 <HAL_TIM_IC_Start_IT+0x90>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2245      	movs	r2, #69	@ 0x45
 800271a:	5c9b      	ldrb	r3, [r3, r2]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e00b      	b.n	8002738 <HAL_TIM_IC_Start_IT+0xa8>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b08      	cmp	r3, #8
 8002724:	d104      	bne.n	8002730 <HAL_TIM_IC_Start_IT+0xa0>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2246      	movs	r2, #70	@ 0x46
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e003      	b.n	8002738 <HAL_TIM_IC_Start_IT+0xa8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2247      	movs	r2, #71	@ 0x47
 8002734:	5c9b      	ldrb	r3, [r3, r2]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	210d      	movs	r1, #13
 800273a:	187a      	adds	r2, r7, r1
 800273c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800273e:	230e      	movs	r3, #14
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d103      	bne.n	8002750 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002748:	187b      	adds	r3, r7, r1
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d001      	beq.n	8002754 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0bd      	b.n	80028d0 <HAL_TIM_IC_Start_IT+0x240>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_TIM_IC_Start_IT+0xd4>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	223e      	movs	r2, #62	@ 0x3e
 800275e:	2102      	movs	r1, #2
 8002760:	5499      	strb	r1, [r3, r2]
 8002762:	e023      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x11c>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d104      	bne.n	8002774 <HAL_TIM_IC_Start_IT+0xe4>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	223f      	movs	r2, #63	@ 0x3f
 800276e:	2102      	movs	r1, #2
 8002770:	5499      	strb	r1, [r3, r2]
 8002772:	e01b      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x11c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b08      	cmp	r3, #8
 8002778:	d104      	bne.n	8002784 <HAL_TIM_IC_Start_IT+0xf4>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2240      	movs	r2, #64	@ 0x40
 800277e:	2102      	movs	r1, #2
 8002780:	5499      	strb	r1, [r3, r2]
 8002782:	e013      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x11c>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	2b0c      	cmp	r3, #12
 8002788:	d104      	bne.n	8002794 <HAL_TIM_IC_Start_IT+0x104>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2241      	movs	r2, #65	@ 0x41
 800278e:	2102      	movs	r1, #2
 8002790:	5499      	strb	r1, [r3, r2]
 8002792:	e00b      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x11c>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b10      	cmp	r3, #16
 8002798:	d104      	bne.n	80027a4 <HAL_TIM_IC_Start_IT+0x114>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2242      	movs	r2, #66	@ 0x42
 800279e:	2102      	movs	r1, #2
 80027a0:	5499      	strb	r1, [r3, r2]
 80027a2:	e003      	b.n	80027ac <HAL_TIM_IC_Start_IT+0x11c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2243      	movs	r2, #67	@ 0x43
 80027a8:	2102      	movs	r1, #2
 80027aa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <HAL_TIM_IC_Start_IT+0x12c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2244      	movs	r2, #68	@ 0x44
 80027b6:	2102      	movs	r1, #2
 80027b8:	5499      	strb	r1, [r3, r2]
 80027ba:	e013      	b.n	80027e4 <HAL_TIM_IC_Start_IT+0x154>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d104      	bne.n	80027cc <HAL_TIM_IC_Start_IT+0x13c>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2245      	movs	r2, #69	@ 0x45
 80027c6:	2102      	movs	r1, #2
 80027c8:	5499      	strb	r1, [r3, r2]
 80027ca:	e00b      	b.n	80027e4 <HAL_TIM_IC_Start_IT+0x154>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d104      	bne.n	80027dc <HAL_TIM_IC_Start_IT+0x14c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2246      	movs	r2, #70	@ 0x46
 80027d6:	2102      	movs	r1, #2
 80027d8:	5499      	strb	r1, [r3, r2]
 80027da:	e003      	b.n	80027e4 <HAL_TIM_IC_Start_IT+0x154>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2247      	movs	r2, #71	@ 0x47
 80027e0:	2102      	movs	r1, #2
 80027e2:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d02a      	beq.n	8002840 <HAL_TIM_IC_Start_IT+0x1b0>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d830      	bhi.n	8002852 <HAL_TIM_IC_Start_IT+0x1c2>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b08      	cmp	r3, #8
 80027f4:	d01b      	beq.n	800282e <HAL_TIM_IC_Start_IT+0x19e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d82a      	bhi.n	8002852 <HAL_TIM_IC_Start_IT+0x1c2>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IC_Start_IT+0x17a>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	2b04      	cmp	r3, #4
 8002806:	d009      	beq.n	800281c <HAL_TIM_IC_Start_IT+0x18c>
 8002808:	e023      	b.n	8002852 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2102      	movs	r1, #2
 8002816:	430a      	orrs	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
      break;
 800281a:	e01f      	b.n	800285c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2104      	movs	r1, #4
 8002828:	430a      	orrs	r2, r1
 800282a:	60da      	str	r2, [r3, #12]
      break;
 800282c:	e016      	b.n	800285c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2108      	movs	r1, #8
 800283a:	430a      	orrs	r2, r1
 800283c:	60da      	str	r2, [r3, #12]
      break;
 800283e:	e00d      	b.n	800285c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68da      	ldr	r2, [r3, #12]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2110      	movs	r1, #16
 800284c:	430a      	orrs	r2, r1
 800284e:	60da      	str	r2, [r3, #12]
      break;
 8002850:	e004      	b.n	800285c <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8002852:	230f      	movs	r3, #15
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
      break;
 800285a:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800285c:	230f      	movs	r3, #15
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d131      	bne.n	80028ca <HAL_TIM_IC_Start_IT+0x23a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6839      	ldr	r1, [r7, #0]
 800286c:	2201      	movs	r2, #1
 800286e:	0018      	movs	r0, r3
 8002870:	f001 f8a6 	bl	80039c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a17      	ldr	r2, [pc, #92]	@ (80028d8 <HAL_TIM_IC_Start_IT+0x248>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d004      	beq.n	8002888 <HAL_TIM_IC_Start_IT+0x1f8>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a16      	ldr	r2, [pc, #88]	@ (80028dc <HAL_TIM_IC_Start_IT+0x24c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d116      	bne.n	80028b6 <HAL_TIM_IC_Start_IT+0x226>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <HAL_TIM_IC_Start_IT+0x250>)
 8002890:	4013      	ands	r3, r2
 8002892:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2b06      	cmp	r3, #6
 8002898:	d016      	beq.n	80028c8 <HAL_TIM_IC_Start_IT+0x238>
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	025b      	lsls	r3, r3, #9
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d011      	beq.n	80028c8 <HAL_TIM_IC_Start_IT+0x238>
      {
        __HAL_TIM_ENABLE(htim);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b4:	e008      	b.n	80028c8 <HAL_TIM_IC_Start_IT+0x238>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	430a      	orrs	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	e000      	b.n	80028ca <HAL_TIM_IC_Start_IT+0x23a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80028ca:	230f      	movs	r3, #15
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	781b      	ldrb	r3, [r3, #0]
}
 80028d0:	0018      	movs	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b004      	add	sp, #16
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	00010007 	.word	0x00010007

080028e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2202      	movs	r2, #2
 8002900:	4013      	ands	r3, r2
 8002902:	d021      	beq.n	8002948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d01d      	beq.n	8002948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2203      	movs	r2, #3
 8002912:	4252      	negs	r2, r2
 8002914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2203      	movs	r2, #3
 8002924:	4013      	ands	r3, r2
 8002926:	d004      	beq.n	8002932 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fb6c 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002930:	e007      	b.n	8002942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 fb5f 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	0018      	movs	r0, r3
 800293e:	f000 fb6b 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2204      	movs	r2, #4
 800294c:	4013      	ands	r3, r2
 800294e:	d022      	beq.n	8002996 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2204      	movs	r2, #4
 8002954:	4013      	ands	r3, r2
 8002956:	d01e      	beq.n	8002996 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2205      	movs	r2, #5
 800295e:	4252      	negs	r2, r2
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	23c0      	movs	r3, #192	@ 0xc0
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4013      	ands	r3, r2
 8002974:	d004      	beq.n	8002980 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	0018      	movs	r0, r3
 800297a:	f000 fb45 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 800297e:	e007      	b.n	8002990 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fb38 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 fb44 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2208      	movs	r2, #8
 800299a:	4013      	ands	r3, r2
 800299c:	d021      	beq.n	80029e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2208      	movs	r2, #8
 80029a2:	4013      	ands	r3, r2
 80029a4:	d01d      	beq.n	80029e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2209      	movs	r2, #9
 80029ac:	4252      	negs	r2, r2
 80029ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2204      	movs	r2, #4
 80029b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2203      	movs	r2, #3
 80029be:	4013      	ands	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 fb1f 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 80029ca:	e007      	b.n	80029dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	0018      	movs	r0, r3
 80029d0:	f000 fb12 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fb1e 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2210      	movs	r2, #16
 80029e6:	4013      	ands	r3, r2
 80029e8:	d022      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2210      	movs	r2, #16
 80029ee:	4013      	ands	r3, r2
 80029f0:	d01e      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2211      	movs	r2, #17
 80029f8:	4252      	negs	r2, r2
 80029fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2208      	movs	r2, #8
 8002a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	69da      	ldr	r2, [r3, #28]
 8002a08:	23c0      	movs	r3, #192	@ 0xc0
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 faf8 	bl	8003008 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e007      	b.n	8002a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 faeb 	bl	8002ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 faf7 	bl	8003018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d00c      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d008      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2202      	movs	r2, #2
 8002a46:	4252      	negs	r2, r2
 8002a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f000 facb 	bl	8002fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2280      	movs	r2, #128	@ 0x80
 8002a56:	4013      	ands	r3, r2
 8002a58:	d104      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	019b      	lsls	r3, r3, #6
 8002a60:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a62:	d00b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2280      	movs	r2, #128	@ 0x80
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1e      	ldr	r2, [pc, #120]	@ (8002aec <HAL_TIM_IRQHandler+0x208>)
 8002a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f001 f8cc 	bl	8003c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	2380      	movs	r3, #128	@ 0x80
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4013      	ands	r3, r2
 8002a84:	d00b      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2280      	movs	r2, #128	@ 0x80
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a17      	ldr	r2, [pc, #92]	@ (8002af0 <HAL_TIM_IRQHandler+0x20c>)
 8002a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f001 f8c3 	bl	8003c24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2240      	movs	r2, #64	@ 0x40
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d00c      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2240      	movs	r2, #64	@ 0x40
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d008      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2241      	movs	r2, #65	@ 0x41
 8002ab4:	4252      	negs	r2, r2
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 fab4 	bl	8003028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2220      	movs	r2, #32
 8002acc:	4013      	ands	r3, r2
 8002ace:	d008      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2221      	movs	r2, #33	@ 0x21
 8002ad6:	4252      	negs	r2, r2
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f001 f891 	bl	8003c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	b004      	add	sp, #16
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	ffffdf7f 	.word	0xffffdf7f
 8002af0:	fffffeff 	.word	0xfffffeff

08002af4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2317      	movs	r3, #23
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	223c      	movs	r2, #60	@ 0x3c
 8002b0c:	5c9b      	ldrb	r3, [r3, r2]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_IC_ConfigChannel+0x22>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e08c      	b.n	8002c30 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	223c      	movs	r2, #60	@ 0x3c
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002b34:	f000 fd8e 	bl	8003654 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	210c      	movs	r1, #12
 8002b44:	438a      	bics	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6999      	ldr	r1, [r3, #24]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	619a      	str	r2, [r3, #24]
 8002b5a:	e062      	b.n	8002c22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d11c      	bne.n	8002b9c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002b72:	f000 fdef 	bl	8003754 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699a      	ldr	r2, [r3, #24]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	492d      	ldr	r1, [pc, #180]	@ (8002c38 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002b82:	400a      	ands	r2, r1
 8002b84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	6999      	ldr	r1, [r3, #24]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	430a      	orrs	r2, r1
 8002b98:	619a      	str	r2, [r3, #24]
 8002b9a:	e042      	b.n	8002c22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d11b      	bne.n	8002bda <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002bb2:	f000 fe43 	bl	800383c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	210c      	movs	r1, #12
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	61da      	str	r2, [r3, #28]
 8002bd8:	e023      	b.n	8002c22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b0c      	cmp	r3, #12
 8002bde:	d11c      	bne.n	8002c1a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002bf0:	f000 fe64 	bl	80038bc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	490e      	ldr	r1, [pc, #56]	@ (8002c38 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69d9      	ldr	r1, [r3, #28]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	021a      	lsls	r2, r3, #8
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	430a      	orrs	r2, r1
 8002c16:	61da      	str	r2, [r3, #28]
 8002c18:	e003      	b.n	8002c22 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002c1a:	2317      	movs	r3, #23
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	2201      	movs	r2, #1
 8002c20:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	223c      	movs	r2, #60	@ 0x3c
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]

  return status;
 8002c2a:	2317      	movs	r3, #23
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b006      	add	sp, #24
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	fffff3ff 	.word	0xfffff3ff

08002c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2317      	movs	r3, #23
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	223c      	movs	r2, #60	@ 0x3c
 8002c54:	5c9b      	ldrb	r3, [r3, r2]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	e0e5      	b.n	8002e2a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	223c      	movs	r2, #60	@ 0x3c
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b14      	cmp	r3, #20
 8002c6a:	d900      	bls.n	8002c6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c6c:	e0d1      	b.n	8002e12 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	009a      	lsls	r2, r3, #2
 8002c72:	4b70      	ldr	r3, [pc, #448]	@ (8002e34 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002c74:	18d3      	adds	r3, r2, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f000 fa4a 	bl	800311c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2108      	movs	r1, #8
 8002c94:	430a      	orrs	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2104      	movs	r1, #4
 8002ca4:	438a      	bics	r2, r1
 8002ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6999      	ldr	r1, [r3, #24]
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	691a      	ldr	r2, [r3, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]
      break;
 8002cba:	e0af      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	0011      	movs	r1, r2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 faa9 	bl	800321c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2180      	movs	r1, #128	@ 0x80
 8002cd6:	0109      	lsls	r1, r1, #4
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699a      	ldr	r2, [r3, #24]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4954      	ldr	r1, [pc, #336]	@ (8002e38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002ce8:	400a      	ands	r2, r1
 8002cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6999      	ldr	r1, [r3, #24]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	021a      	lsls	r2, r3, #8
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	619a      	str	r2, [r3, #24]
      break;
 8002d00:	e08c      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	0011      	movs	r1, r2
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 fb04 	bl	8003318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2108      	movs	r1, #8
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2104      	movs	r1, #4
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	69d9      	ldr	r1, [r3, #28]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	61da      	str	r2, [r3, #28]
      break;
 8002d42:	e06b      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68ba      	ldr	r2, [r7, #8]
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fb65 	bl	800341c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69da      	ldr	r2, [r3, #28]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	0109      	lsls	r1, r1, #4
 8002d60:	430a      	orrs	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4932      	ldr	r1, [pc, #200]	@ (8002e38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69d9      	ldr	r1, [r3, #28]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	021a      	lsls	r2, r3, #8
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
      break;
 8002d88:	e048      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	0011      	movs	r1, r2
 8002d92:	0018      	movs	r0, r3
 8002d94:	f000 fba6 	bl	80034e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2108      	movs	r1, #8
 8002da4:	430a      	orrs	r2, r1
 8002da6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2104      	movs	r1, #4
 8002db4:	438a      	bics	r2, r1
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002dca:	e027      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 fbdf 	bl	8003598 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2180      	movs	r1, #128	@ 0x80
 8002de6:	0109      	lsls	r1, r1, #4
 8002de8:	430a      	orrs	r2, r1
 8002dea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4910      	ldr	r1, [pc, #64]	@ (8002e38 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002df8:	400a      	ands	r2, r1
 8002dfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	021a      	lsls	r2, r3, #8
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002e10:	e004      	b.n	8002e1c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002e12:	2317      	movs	r3, #23
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
      break;
 8002e1a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	223c      	movs	r2, #60	@ 0x3c
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

  return status;
 8002e24:	2317      	movs	r3, #23
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	781b      	ldrb	r3, [r3, #0]
}
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	b006      	add	sp, #24
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	08003ce4 	.word	0x08003ce4
 8002e38:	fffffbff 	.word	0xfffffbff

08002e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e46:	230f      	movs	r3, #15
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223c      	movs	r2, #60	@ 0x3c
 8002e52:	5c9b      	ldrb	r3, [r3, r2]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIM_ConfigClockSource+0x20>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0bc      	b.n	8002fd6 <HAL_TIM_ConfigClockSource+0x19a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	223c      	movs	r2, #60	@ 0x3c
 8002e60:	2101      	movs	r1, #1
 8002e62:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	223d      	movs	r2, #61	@ 0x3d
 8002e68:	2102      	movs	r1, #2
 8002e6a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4a5a      	ldr	r2, [pc, #360]	@ (8002fe0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4a59      	ldr	r2, [pc, #356]	@ (8002fe4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2280      	movs	r2, #128	@ 0x80
 8002e92:	0192      	lsls	r2, r2, #6
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d040      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0xde>
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	0192      	lsls	r2, r2, #6
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d900      	bls.n	8002ea2 <HAL_TIM_ConfigClockSource+0x66>
 8002ea0:	e088      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ea2:	2280      	movs	r2, #128	@ 0x80
 8002ea4:	0152      	lsls	r2, r2, #5
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d100      	bne.n	8002eac <HAL_TIM_ConfigClockSource+0x70>
 8002eaa:	e088      	b.n	8002fbe <HAL_TIM_ConfigClockSource+0x182>
 8002eac:	2280      	movs	r2, #128	@ 0x80
 8002eae:	0152      	lsls	r2, r2, #5
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d900      	bls.n	8002eb6 <HAL_TIM_ConfigClockSource+0x7a>
 8002eb4:	e07e      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002eb6:	2b70      	cmp	r3, #112	@ 0x70
 8002eb8:	d018      	beq.n	8002eec <HAL_TIM_ConfigClockSource+0xb0>
 8002eba:	d900      	bls.n	8002ebe <HAL_TIM_ConfigClockSource+0x82>
 8002ebc:	e07a      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ebe:	2b60      	cmp	r3, #96	@ 0x60
 8002ec0:	d04f      	beq.n	8002f62 <HAL_TIM_ConfigClockSource+0x126>
 8002ec2:	d900      	bls.n	8002ec6 <HAL_TIM_ConfigClockSource+0x8a>
 8002ec4:	e076      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ec6:	2b50      	cmp	r3, #80	@ 0x50
 8002ec8:	d03b      	beq.n	8002f42 <HAL_TIM_ConfigClockSource+0x106>
 8002eca:	d900      	bls.n	8002ece <HAL_TIM_ConfigClockSource+0x92>
 8002ecc:	e072      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d057      	beq.n	8002f82 <HAL_TIM_ConfigClockSource+0x146>
 8002ed2:	d900      	bls.n	8002ed6 <HAL_TIM_ConfigClockSource+0x9a>
 8002ed4:	e06e      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ed6:	2b30      	cmp	r3, #48	@ 0x30
 8002ed8:	d063      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x166>
 8002eda:	d86b      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d060      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x166>
 8002ee0:	d868      	bhi.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d05d      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x166>
 8002ee6:	2b10      	cmp	r3, #16
 8002ee8:	d05b      	beq.n	8002fa2 <HAL_TIM_ConfigClockSource+0x166>
 8002eea:	e063      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002efc:	f000 fd40 	bl	8003980 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2277      	movs	r2, #119	@ 0x77
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	609a      	str	r2, [r3, #8]
      break;
 8002f18:	e052      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f2a:	f000 fd29 	bl	8003980 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2180      	movs	r1, #128	@ 0x80
 8002f3a:	01c9      	lsls	r1, r1, #7
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
      break;
 8002f40:	e03e      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f4e:	001a      	movs	r2, r3
 8002f50:	f000 fbd2 	bl	80036f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2150      	movs	r1, #80	@ 0x50
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 fcf4 	bl	8003948 <TIM_ITRx_SetConfig>
      break;
 8002f60:	e02e      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f6e:	001a      	movs	r2, r3
 8002f70:	f000 fc32 	bl	80037d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2160      	movs	r1, #96	@ 0x60
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 fce4 	bl	8003948 <TIM_ITRx_SetConfig>
      break;
 8002f80:	e01e      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f8e:	001a      	movs	r2, r3
 8002f90:	f000 fbb2 	bl	80036f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2140      	movs	r1, #64	@ 0x40
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fcd4 	bl	8003948 <TIM_ITRx_SetConfig>
      break;
 8002fa0:	e00e      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	0019      	movs	r1, r3
 8002fac:	0010      	movs	r0, r2
 8002fae:	f000 fccb 	bl	8003948 <TIM_ITRx_SetConfig>
      break;
 8002fb2:	e005      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
      break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002fbe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	223d      	movs	r2, #61	@ 0x3d
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	223c      	movs	r2, #60	@ 0x3c
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5499      	strb	r1, [r3, r2]

  return status;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	ffceff88 	.word	0xffceff88
 8002fe4:	ffff00ff 	.word	0xffff00ff

08002fe8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003000:	46c0      	nop			@ (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003030:	46c0      	nop			@ (mov r8, r8)
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bd80      	pop	{r7, pc}

08003038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a2e      	ldr	r2, [pc, #184]	@ (8003104 <TIM_Base_SetConfig+0xcc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x20>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a2d      	ldr	r2, [pc, #180]	@ (8003108 <TIM_Base_SetConfig+0xd0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2270      	movs	r2, #112	@ 0x70
 800305c:	4393      	bics	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a25      	ldr	r2, [pc, #148]	@ (8003104 <TIM_Base_SetConfig+0xcc>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00f      	beq.n	8003092 <TIM_Base_SetConfig+0x5a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <TIM_Base_SetConfig+0xd0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00b      	beq.n	8003092 <TIM_Base_SetConfig+0x5a>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a23      	ldr	r2, [pc, #140]	@ (800310c <TIM_Base_SetConfig+0xd4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <TIM_Base_SetConfig+0x5a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a22      	ldr	r2, [pc, #136]	@ (8003110 <TIM_Base_SetConfig+0xd8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d003      	beq.n	8003092 <TIM_Base_SetConfig+0x5a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a21      	ldr	r2, [pc, #132]	@ (8003114 <TIM_Base_SetConfig+0xdc>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d108      	bne.n	80030a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4a20      	ldr	r2, [pc, #128]	@ (8003118 <TIM_Base_SetConfig+0xe0>)
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2280      	movs	r2, #128	@ 0x80
 80030a8:	4393      	bics	r3, r2
 80030aa:	001a      	movs	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a0f      	ldr	r2, [pc, #60]	@ (8003104 <TIM_Base_SetConfig+0xcc>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d007      	beq.n	80030dc <TIM_Base_SetConfig+0xa4>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a10      	ldr	r2, [pc, #64]	@ (8003110 <TIM_Base_SetConfig+0xd8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d003      	beq.n	80030dc <TIM_Base_SetConfig+0xa4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <TIM_Base_SetConfig+0xdc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d103      	bne.n	80030e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2204      	movs	r2, #4
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]
}
 80030fc:	46c0      	nop			@ (mov r8, r8)
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40002000 	.word	0x40002000
 8003110:	40014400 	.word	0x40014400
 8003114:	40014800 	.word	0x40014800
 8003118:	fffffcff 	.word	0xfffffcff

0800311c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	2201      	movs	r2, #1
 8003132:	4393      	bics	r3, r2
 8003134:	001a      	movs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4a2e      	ldr	r2, [pc, #184]	@ (8003204 <TIM_OC1_SetConfig+0xe8>)
 800314a:	4013      	ands	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2203      	movs	r2, #3
 8003152:	4393      	bics	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2202      	movs	r2, #2
 8003164:	4393      	bics	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a24      	ldr	r2, [pc, #144]	@ (8003208 <TIM_OC1_SetConfig+0xec>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <TIM_OC1_SetConfig+0x6e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a23      	ldr	r2, [pc, #140]	@ (800320c <TIM_OC1_SetConfig+0xf0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d003      	beq.n	800318a <TIM_OC1_SetConfig+0x6e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a22      	ldr	r2, [pc, #136]	@ (8003210 <TIM_OC1_SetConfig+0xf4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10c      	bne.n	80031a4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2208      	movs	r2, #8
 800318e:	4393      	bics	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2204      	movs	r2, #4
 80031a0:	4393      	bics	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a18      	ldr	r2, [pc, #96]	@ (8003208 <TIM_OC1_SetConfig+0xec>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <TIM_OC1_SetConfig+0xa0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a17      	ldr	r2, [pc, #92]	@ (800320c <TIM_OC1_SetConfig+0xf0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d003      	beq.n	80031bc <TIM_OC1_SetConfig+0xa0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a16      	ldr	r2, [pc, #88]	@ (8003210 <TIM_OC1_SetConfig+0xf4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d111      	bne.n	80031e0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	4a15      	ldr	r2, [pc, #84]	@ (8003214 <TIM_OC1_SetConfig+0xf8>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4a14      	ldr	r2, [pc, #80]	@ (8003218 <TIM_OC1_SetConfig+0xfc>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b006      	add	sp, #24
 8003200:	bd80      	pop	{r7, pc}
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	fffeff8f 	.word	0xfffeff8f
 8003208:	40012c00 	.word	0x40012c00
 800320c:	40014400 	.word	0x40014400
 8003210:	40014800 	.word	0x40014800
 8003214:	fffffeff 	.word	0xfffffeff
 8003218:	fffffdff 	.word	0xfffffdff

0800321c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	2210      	movs	r2, #16
 8003232:	4393      	bics	r3, r2
 8003234:	001a      	movs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a2c      	ldr	r2, [pc, #176]	@ (80032fc <TIM_OC2_SetConfig+0xe0>)
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4a2b      	ldr	r2, [pc, #172]	@ (8003300 <TIM_OC2_SetConfig+0xe4>)
 8003252:	4013      	ands	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	021b      	lsls	r3, r3, #8
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2220      	movs	r2, #32
 8003266:	4393      	bics	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a22      	ldr	r2, [pc, #136]	@ (8003304 <TIM_OC2_SetConfig+0xe8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10d      	bne.n	800329a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	2280      	movs	r2, #128	@ 0x80
 8003282:	4393      	bics	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2240      	movs	r2, #64	@ 0x40
 8003296:	4393      	bics	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	@ (8003304 <TIM_OC2_SetConfig+0xe8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <TIM_OC2_SetConfig+0x96>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a18      	ldr	r2, [pc, #96]	@ (8003308 <TIM_OC2_SetConfig+0xec>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_OC2_SetConfig+0x96>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a17      	ldr	r2, [pc, #92]	@ (800330c <TIM_OC2_SetConfig+0xf0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d113      	bne.n	80032da <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <TIM_OC2_SetConfig+0xf4>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4a15      	ldr	r2, [pc, #84]	@ (8003314 <TIM_OC2_SetConfig+0xf8>)
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	feff8fff 	.word	0xfeff8fff
 8003300:	fffffcff 	.word	0xfffffcff
 8003304:	40012c00 	.word	0x40012c00
 8003308:	40014400 	.word	0x40014400
 800330c:	40014800 	.word	0x40014800
 8003310:	fffffbff 	.word	0xfffffbff
 8003314:	fffff7ff 	.word	0xfffff7ff

08003318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a31      	ldr	r2, [pc, #196]	@ (80033f4 <TIM_OC3_SetConfig+0xdc>)
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a2d      	ldr	r2, [pc, #180]	@ (80033f8 <TIM_OC3_SetConfig+0xe0>)
 8003344:	4013      	ands	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2203      	movs	r2, #3
 800334c:	4393      	bics	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4a27      	ldr	r2, [pc, #156]	@ (80033fc <TIM_OC3_SetConfig+0xe4>)
 800335e:	4013      	ands	r3, r2
 8003360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a23      	ldr	r2, [pc, #140]	@ (8003400 <TIM_OC3_SetConfig+0xe8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10d      	bne.n	8003392 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	4a22      	ldr	r2, [pc, #136]	@ (8003404 <TIM_OC3_SetConfig+0xec>)
 800337a:	4013      	ands	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	4a1e      	ldr	r2, [pc, #120]	@ (8003408 <TIM_OC3_SetConfig+0xf0>)
 800338e:	4013      	ands	r3, r2
 8003390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a1a      	ldr	r2, [pc, #104]	@ (8003400 <TIM_OC3_SetConfig+0xe8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_OC3_SetConfig+0x92>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a1b      	ldr	r2, [pc, #108]	@ (800340c <TIM_OC3_SetConfig+0xf4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_OC3_SetConfig+0x92>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003410 <TIM_OC3_SetConfig+0xf8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d113      	bne.n	80033d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <TIM_OC3_SetConfig+0xfc>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	4a18      	ldr	r2, [pc, #96]	@ (8003418 <TIM_OC3_SetConfig+0x100>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	621a      	str	r2, [r3, #32]
}
 80033ec:	46c0      	nop			@ (mov r8, r8)
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b006      	add	sp, #24
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	fffffeff 	.word	0xfffffeff
 80033f8:	fffeff8f 	.word	0xfffeff8f
 80033fc:	fffffdff 	.word	0xfffffdff
 8003400:	40012c00 	.word	0x40012c00
 8003404:	fffff7ff 	.word	0xfffff7ff
 8003408:	fffffbff 	.word	0xfffffbff
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800
 8003414:	ffffefff 	.word	0xffffefff
 8003418:	ffffdfff 	.word	0xffffdfff

0800341c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a24      	ldr	r2, [pc, #144]	@ (80034c4 <TIM_OC4_SetConfig+0xa8>)
 8003432:	401a      	ands	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a20      	ldr	r2, [pc, #128]	@ (80034c8 <TIM_OC4_SetConfig+0xac>)
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a1f      	ldr	r2, [pc, #124]	@ (80034cc <TIM_OC4_SetConfig+0xb0>)
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4a1b      	ldr	r2, [pc, #108]	@ (80034d0 <TIM_OC4_SetConfig+0xb4>)
 8003464:	4013      	ands	r3, r2
 8003466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	031b      	lsls	r3, r3, #12
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	4313      	orrs	r3, r2
 8003472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <TIM_OC4_SetConfig+0xb8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d007      	beq.n	800348c <TIM_OC4_SetConfig+0x70>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a16      	ldr	r2, [pc, #88]	@ (80034d8 <TIM_OC4_SetConfig+0xbc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_OC4_SetConfig+0x70>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a15      	ldr	r2, [pc, #84]	@ (80034dc <TIM_OC4_SetConfig+0xc0>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d109      	bne.n	80034a0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	4a14      	ldr	r2, [pc, #80]	@ (80034e0 <TIM_OC4_SetConfig+0xc4>)
 8003490:	4013      	ands	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	019b      	lsls	r3, r3, #6
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	621a      	str	r2, [r3, #32]
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	46bd      	mov	sp, r7
 80034be:	b006      	add	sp, #24
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	ffffefff 	.word	0xffffefff
 80034c8:	feff8fff 	.word	0xfeff8fff
 80034cc:	fffffcff 	.word	0xfffffcff
 80034d0:	ffffdfff 	.word	0xffffdfff
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40014400 	.word	0x40014400
 80034dc:	40014800 	.word	0x40014800
 80034e0:	ffffbfff 	.word	0xffffbfff

080034e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a21      	ldr	r2, [pc, #132]	@ (8003580 <TIM_OC5_SetConfig+0x9c>)
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a1d      	ldr	r2, [pc, #116]	@ (8003584 <TIM_OC5_SetConfig+0xa0>)
 8003510:	4013      	ands	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	4a19      	ldr	r2, [pc, #100]	@ (8003588 <TIM_OC5_SetConfig+0xa4>)
 8003522:	4013      	ands	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	041b      	lsls	r3, r3, #16
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a15      	ldr	r2, [pc, #84]	@ (800358c <TIM_OC5_SetConfig+0xa8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_OC5_SetConfig+0x66>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <TIM_OC5_SetConfig+0xac>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_OC5_SetConfig+0x66>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <TIM_OC5_SetConfig+0xb0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d109      	bne.n	800355e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	4a0c      	ldr	r2, [pc, #48]	@ (8003580 <TIM_OC5_SetConfig+0x9c>)
 800354e:	4013      	ands	r3, r2
 8003550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	621a      	str	r2, [r3, #32]
}
 8003578:	46c0      	nop			@ (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b006      	add	sp, #24
 800357e:	bd80      	pop	{r7, pc}
 8003580:	fffeffff 	.word	0xfffeffff
 8003584:	fffeff8f 	.word	0xfffeff8f
 8003588:	fffdffff 	.word	0xfffdffff
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800

08003598 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4a22      	ldr	r2, [pc, #136]	@ (8003638 <TIM_OC6_SetConfig+0xa0>)
 80035ae:	401a      	ands	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a1e      	ldr	r2, [pc, #120]	@ (800363c <TIM_OC6_SetConfig+0xa4>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003640 <TIM_OC6_SetConfig+0xa8>)
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	051b      	lsls	r3, r3, #20
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a16      	ldr	r2, [pc, #88]	@ (8003644 <TIM_OC6_SetConfig+0xac>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d007      	beq.n	8003600 <TIM_OC6_SetConfig+0x68>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <TIM_OC6_SetConfig+0xb0>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_OC6_SetConfig+0x68>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a14      	ldr	r2, [pc, #80]	@ (800364c <TIM_OC6_SetConfig+0xb4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d109      	bne.n	8003614 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	4a13      	ldr	r2, [pc, #76]	@ (8003650 <TIM_OC6_SetConfig+0xb8>)
 8003604:	4013      	ands	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	621a      	str	r2, [r3, #32]
}
 800362e:	46c0      	nop			@ (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b006      	add	sp, #24
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	ffefffff 	.word	0xffefffff
 800363c:	feff8fff 	.word	0xfeff8fff
 8003640:	ffdfffff 	.word	0xffdfffff
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40014400 	.word	0x40014400
 800364c:	40014800 	.word	0x40014800
 8003650:	fffbffff 	.word	0xfffbffff

08003654 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
 8003660:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	2201      	movs	r2, #1
 800366e:	4393      	bics	r3, r2
 8003670:	001a      	movs	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <TIM_TI1_SetConfig+0x9c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_TI1_SetConfig+0x38>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <TIM_TI1_SetConfig+0xa0>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d101      	bne.n	8003690 <TIM_TI1_SetConfig+0x3c>
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <TIM_TI1_SetConfig+0x3e>
 8003690:	2300      	movs	r3, #0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2203      	movs	r2, #3
 800369a:	4393      	bics	r3, r2
 800369c:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	e003      	b.n	80036b0 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	22f0      	movs	r2, #240	@ 0xf0
 80036b4:	4393      	bics	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	22ff      	movs	r2, #255	@ 0xff
 80036be:	4013      	ands	r3, r2
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	220a      	movs	r2, #10
 80036ca:	4393      	bics	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	220a      	movs	r2, #10
 80036d2:	4013      	ands	r3, r2
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	621a      	str	r2, [r3, #32]
}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b006      	add	sp, #24
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400

080036f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	2201      	movs	r2, #1
 8003710:	4393      	bics	r3, r2
 8003712:	001a      	movs	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	22f0      	movs	r2, #240	@ 0xf0
 8003722:	4393      	bics	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	220a      	movs	r2, #10
 8003734:	4393      	bics	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b006      	add	sp, #24
 8003752:	bd80      	pop	{r7, pc}

08003754 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	2210      	movs	r2, #16
 800376e:	4393      	bics	r3, r2
 8003770:	001a      	movs	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <TIM_TI2_SetConfig+0x7c>)
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4313      	orrs	r3, r2
 800378c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4a10      	ldr	r2, [pc, #64]	@ (80037d4 <TIM_TI2_SetConfig+0x80>)
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	031b      	lsls	r3, r3, #12
 800379a:	041b      	lsls	r3, r3, #16
 800379c:	0c1b      	lsrs	r3, r3, #16
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	22a0      	movs	r2, #160	@ 0xa0
 80037a8:	4393      	bics	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	22a0      	movs	r2, #160	@ 0xa0
 80037b2:	4013      	ands	r3, r2
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	621a      	str	r2, [r3, #32]
}
 80037c6:	46c0      	nop			@ (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b006      	add	sp, #24
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	fffffcff 	.word	0xfffffcff
 80037d4:	ffff0fff 	.word	0xffff0fff

080037d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	2210      	movs	r2, #16
 80037f0:	4393      	bics	r3, r2
 80037f2:	001a      	movs	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4a0d      	ldr	r2, [pc, #52]	@ (8003838 <TIM_TI2_ConfigInputStage+0x60>)
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	031b      	lsls	r3, r3, #12
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	4313      	orrs	r3, r2
 800380e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	22a0      	movs	r2, #160	@ 0xa0
 8003814:	4393      	bics	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	697a      	ldr	r2, [r7, #20]
 800382c:	621a      	str	r2, [r3, #32]
}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b006      	add	sp, #24
 8003834:	bd80      	pop	{r7, pc}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	ffff0fff 	.word	0xffff0fff

0800383c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4a17      	ldr	r2, [pc, #92]	@ (80038b4 <TIM_TI3_SetConfig+0x78>)
 8003856:	401a      	ands	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2203      	movs	r2, #3
 8003866:	4393      	bics	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	22f0      	movs	r2, #240	@ 0xf0
 8003876:	4393      	bics	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	22ff      	movs	r2, #255	@ 0xff
 8003880:	4013      	ands	r3, r2
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	4a0b      	ldr	r2, [pc, #44]	@ (80038b8 <TIM_TI3_SetConfig+0x7c>)
 800388c:	4013      	ands	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	23a0      	movs	r3, #160	@ 0xa0
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	4013      	ands	r3, r2
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	46c0      	nop			@ (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b006      	add	sp, #24
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	fffffeff 	.word	0xfffffeff
 80038b8:	fffff5ff 	.word	0xfffff5ff

080038bc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <TIM_TI4_SetConfig+0x7c>)
 80038d6:	401a      	ands	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4a15      	ldr	r2, [pc, #84]	@ (800393c <TIM_TI4_SetConfig+0x80>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4a12      	ldr	r2, [pc, #72]	@ (8003940 <TIM_TI4_SetConfig+0x84>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	031b      	lsls	r3, r3, #12
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	0c1b      	lsrs	r3, r3, #16
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	4a0d      	ldr	r2, [pc, #52]	@ (8003944 <TIM_TI4_SetConfig+0x88>)
 800390e:	4013      	ands	r3, r2
 8003910:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	031a      	lsls	r2, r3, #12
 8003916:	23a0      	movs	r3, #160	@ 0xa0
 8003918:	021b      	lsls	r3, r3, #8
 800391a:	4013      	ands	r3, r2
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	46c0      	nop			@ (mov r8, r8)
 8003930:	46bd      	mov	sp, r7
 8003932:	b006      	add	sp, #24
 8003934:	bd80      	pop	{r7, pc}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	ffffefff 	.word	0xffffefff
 800393c:	fffffcff 	.word	0xfffffcff
 8003940:	ffff0fff 	.word	0xffff0fff
 8003944:	ffff5fff 	.word	0xffff5fff

08003948 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a08      	ldr	r2, [pc, #32]	@ (800397c <TIM_ITRx_SetConfig+0x34>)
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003960:	683a      	ldr	r2, [r7, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	2207      	movs	r2, #7
 8003968:	4313      	orrs	r3, r2
 800396a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	609a      	str	r2, [r3, #8]
}
 8003972:	46c0      	nop			@ (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b004      	add	sp, #16
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	ffcfff8f 	.word	0xffcfff8f

08003980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	4a09      	ldr	r2, [pc, #36]	@ (80039bc <TIM_ETR_SetConfig+0x3c>)
 8003998:	4013      	ands	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	021a      	lsls	r2, r3, #8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	609a      	str	r2, [r3, #8]
}
 80039b4:	46c0      	nop			@ (mov r8, r8)
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b006      	add	sp, #24
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	ffff00ff 	.word	0xffff00ff

080039c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	221f      	movs	r2, #31
 80039d0:	4013      	ands	r3, r2
 80039d2:	2201      	movs	r2, #1
 80039d4:	409a      	lsls	r2, r3
 80039d6:	0013      	movs	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	43d2      	mvns	r2, r2
 80039e2:	401a      	ands	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1a      	ldr	r2, [r3, #32]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	211f      	movs	r1, #31
 80039f0:	400b      	ands	r3, r1
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4099      	lsls	r1, r3
 80039f6:	000b      	movs	r3, r1
 80039f8:	431a      	orrs	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b006      	add	sp, #24
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	223c      	movs	r2, #60	@ 0x3c
 8003a16:	5c9b      	ldrb	r3, [r3, r2]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e04a      	b.n	8003ab6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	223c      	movs	r2, #60	@ 0x3c
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	223d      	movs	r2, #61	@ 0x3d
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d108      	bne.n	8003a5c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2270      	movs	r2, #112	@ 0x70
 8003a60:	4393      	bics	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a11      	ldr	r2, [pc, #68]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a10      	ldr	r2, [pc, #64]	@ (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10c      	bne.n	8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	4393      	bics	r3, r2
 8003a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	223d      	movs	r2, #61	@ 0x3d
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	223c      	movs	r2, #60	@ 0x3c
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b004      	add	sp, #16
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	ff0fffff 	.word	0xff0fffff
 8003ac8:	40000400 	.word	0x40000400

08003acc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	223c      	movs	r2, #60	@ 0x3c
 8003ade:	5c9b      	ldrb	r3, [r3, r2]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e06f      	b.n	8003bc8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	223c      	movs	r2, #60	@ 0x3c
 8003aec:	2101      	movs	r1, #1
 8003aee:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	22ff      	movs	r2, #255	@ 0xff
 8003af4:	4393      	bics	r3, r2
 8003af6:	001a      	movs	r2, r3
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a33      	ldr	r2, [pc, #204]	@ (8003bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003b04:	401a      	ands	r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a30      	ldr	r2, [pc, #192]	@ (8003bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003b12:	401a      	ands	r2, r3
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003bd8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003b20:	401a      	ands	r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003b2e:	401a      	ands	r2, r3
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	@ (8003be0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003b3c:	401a      	ands	r2, r3
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a26      	ldr	r2, [pc, #152]	@ (8003be4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003b4a:	401a      	ands	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003b58:	401a      	ands	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	041b      	lsls	r3, r3, #16
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4a21      	ldr	r2, [pc, #132]	@ (8003bec <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b68:	401a      	ands	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d11c      	bne.n	8003bb6 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003b80:	401a      	ands	r2, r3
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b86:	051b      	lsls	r3, r3, #20
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003b90:	401a      	ands	r2, r3
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	4a17      	ldr	r2, [pc, #92]	@ (8003bfc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a15      	ldr	r2, [pc, #84]	@ (8003c00 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003bac:	401a      	ands	r2, r3
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	223c      	movs	r2, #60	@ 0x3c
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	0018      	movs	r0, r3
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b004      	add	sp, #16
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	fffffcff 	.word	0xfffffcff
 8003bd4:	fffffbff 	.word	0xfffffbff
 8003bd8:	fffff7ff 	.word	0xfffff7ff
 8003bdc:	ffffefff 	.word	0xffffefff
 8003be0:	ffffdfff 	.word	0xffffdfff
 8003be4:	ffffbfff 	.word	0xffffbfff
 8003be8:	fff0ffff 	.word	0xfff0ffff
 8003bec:	efffffff 	.word	0xefffffff
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	ff0fffff 	.word	0xff0fffff
 8003bf8:	feffffff 	.word	0xfeffffff
 8003bfc:	fdffffff 	.word	0xfdffffff
 8003c00:	dfffffff 	.word	0xdfffffff

08003c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c0c:	46c0      	nop			@ (mov r8, r8)
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <memset>:
 8003c34:	0003      	movs	r3, r0
 8003c36:	1882      	adds	r2, r0, r2
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d100      	bne.n	8003c3e <memset+0xa>
 8003c3c:	4770      	bx	lr
 8003c3e:	7019      	strb	r1, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	e7f9      	b.n	8003c38 <memset+0x4>

08003c44 <__libc_init_array>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	2600      	movs	r6, #0
 8003c48:	4c0c      	ldr	r4, [pc, #48]	@ (8003c7c <__libc_init_array+0x38>)
 8003c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c80 <__libc_init_array+0x3c>)
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	42a6      	cmp	r6, r4
 8003c52:	d109      	bne.n	8003c68 <__libc_init_array+0x24>
 8003c54:	2600      	movs	r6, #0
 8003c56:	f000 f819 	bl	8003c8c <_init>
 8003c5a:	4c0a      	ldr	r4, [pc, #40]	@ (8003c84 <__libc_init_array+0x40>)
 8003c5c:	4d0a      	ldr	r5, [pc, #40]	@ (8003c88 <__libc_init_array+0x44>)
 8003c5e:	1b64      	subs	r4, r4, r5
 8003c60:	10a4      	asrs	r4, r4, #2
 8003c62:	42a6      	cmp	r6, r4
 8003c64:	d105      	bne.n	8003c72 <__libc_init_array+0x2e>
 8003c66:	bd70      	pop	{r4, r5, r6, pc}
 8003c68:	00b3      	lsls	r3, r6, #2
 8003c6a:	58eb      	ldr	r3, [r5, r3]
 8003c6c:	4798      	blx	r3
 8003c6e:	3601      	adds	r6, #1
 8003c70:	e7ee      	b.n	8003c50 <__libc_init_array+0xc>
 8003c72:	00b3      	lsls	r3, r6, #2
 8003c74:	58eb      	ldr	r3, [r5, r3]
 8003c76:	4798      	blx	r3
 8003c78:	3601      	adds	r6, #1
 8003c7a:	e7f2      	b.n	8003c62 <__libc_init_array+0x1e>
 8003c7c:	08003d38 	.word	0x08003d38
 8003c80:	08003d38 	.word	0x08003d38
 8003c84:	08003d3c 	.word	0x08003d3c
 8003c88:	08003d38 	.word	0x08003d38

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
